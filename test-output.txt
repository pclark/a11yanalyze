
> a11yanalyze@0.1.2 test
> jest --verbose --bail=0

PASS src/scanner/wcag-level-handler.test.ts
  WCAGLevelHandler
    Constructor and Configuration
      ✓ should create handler with default configuration (2 ms)
      ✓ should create handler with custom configuration
      ✓ should update configuration correctly (1 ms)
    Level Inclusion Logic
      ✓ should include correct levels for AA primary level
      ✓ should include correct levels for A primary level
      ✓ should include correct levels for AAA primary level (5 ms)
      ✓ should respect includeAAA configuration
      ✓ should respect includeARIA configuration
    Level Information and Categorization
      ✓ should categorize levels correctly for AA primary level (1 ms)
      ✓ should categorize levels correctly for A primary level
      ✓ should categorize levels correctly for AAA primary level
    Severity Mapping
      ✓ should map error level issues to full severity range (1 ms)
      ✓ should map warning level issues to warning severity
      ✓ should respect treatWarningsAsErrors configuration
      ✓ should respect severity overrides
      ✓ should handle unknown impact values
    Issue Filtering
      ✓ should filter issues based on primary level
      ✓ should include AAA issues when configured (1 ms)
      ✓ should include ARIA issues when configured
      ✓ should include best practice issues when configured
    Issue Categorization
      ✓ should categorize issues correctly
      ✓ should handle different primary levels
    Axe Tags Generation
      ✓ should generate correct tags for AA primary level
      ✓ should generate correct tags for A primary level
      ✓ should generate correct tags for AAA primary level (1 ms)
      ✓ should include best practice tags when configured
      ✓ should not duplicate tags
    Compliance Summary
      ✓ should calculate compliance summary correctly (1 ms)
      ✓ should mark as compliant when no error-level issues
      ✓ should handle different primary levels
    Static Methods
      ✓ should provide supported levels information (2 ms)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.error
    [ERROR] validation: URL validation failed

      650 |       case 'error':
      651 |       case 'fatal':
    > 652 |         console.error(message);
          |                 ^
      653 |         if (error.stack && this.config.includeStackTraces) {
      654 |           console.error(error.stack);
      655 |         }

      at ErrorLogger.logToConsole (src/output/error-logger.ts:652:17)
      at ErrorLogger.logError (src/output/error-logger.ts:271:14)
      at ErrorLogger.error (src/output/error-logger.ts:306:17)
      at UrlValidator.validate (src/cli/url-validator.ts:168:24)
      at Object.<anonymous> (src/cli/url-validator.test.ts:235:38)

  console.error
    Error: Input must be a non-empty string
        at UrlValidator.normalizeInput (/Users/phillipclark/projects/a11yanalyze/src/cli/url-validator.ts:231:13)
        at UrlValidator.validate (/Users/phillipclark/projects/a11yanalyze/src/cli/url-validator.ts:116:36)
        at Object.<anonymous> (/Users/phillipclark/projects/a11yanalyze/src/cli/url-validator.test.ts:235:38)
        at Promise.then.completed (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at _runTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:121:9)
        at run (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/runTest.js:444:34)
        at Object.worker (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/testWorker.js:106:12)

      652 |         console.error(message);
      653 |         if (error.stack && this.config.includeStackTraces) {
    > 654 |           console.error(error.stack);
          |                   ^
      655 |         }
      656 |         break;
      657 |     }

      at ErrorLogger.logToConsole (src/output/error-logger.ts:654:19)
      at ErrorLogger.logError (src/output/error-logger.ts:271:14)
      at ErrorLogger.error (src/output/error-logger.ts:306:17)
      at UrlValidator.validate (src/cli/url-validator.ts:168:24)
      at Object.<anonymous> (src/cli/url-validator.test.ts:235:38)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.log
    [TEST DEBUG] process.cwd(): /Users/phillipclark/projects/a11yanalyze

      at Object.<anonymous> (src/cli/config-manager-jsconfig.test.ts:18:13)

  console.log
    [TEST DEBUG] Directory contents: [
      '.a11yanalyzerc.json',
      '.cursor',
      '.eslintrc.js',
      '.git',
      '.gitignore',
      '.gitignore.swp',
      '.prettierignore',
      '.prettierrc.js',
      '.release-it.json',
      '404-report.json',
      'CONTRIBUTING.md',
      'LICENSE',
      'README.md',
      'dist',
      'docs',
      'example-report.json',
      'jest.config.js',
      'logs',
      'node_modules',
      'package-lock.json',
      'package.json',
      'report.json',
      'sample.a11yanalyzerc.js',
      'sample.a11yanalyzerc.json',
      'sample.a11yanalyzerc.yaml',
      'scripts',
      'src',
      'tasks',
      'tastysoft-accordion-report.json',
      'tastysoft-storybook-batch-output',
      'test-output.txt',
      'tsconfig.json',
      'wikipedia-report.json'
    ]

      at Object.<anonymous> (src/cli/config-manager-jsconfig.test.ts:19:13)

PASS src/__tests__/setup.test.ts
  Jest Setup
    ✓ should have access to global test helpers (5 ms)
    ✓ should create mock scan results (3 ms)
    ✓ should create mock accessibility issues (1 ms)
    ✓ should support custom Jest matchers
    ✓ should detect violations in scan results (1 ms)
    ✓ should support async test helpers (51 ms)
  TypeScript Integration
    ✓ should compile and run TypeScript correctly
    ✓ should support ES6+ features (1 ms)
    ✓ should support async/await (11 ms)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

FAIL src/scoring/accessibility-scorer.test.ts
  AccessibilityScorer
    Scoring Profiles
      ✓ should provide predefined scoring profiles (1 ms)
      ✓ should create scorer with specific profile
      ✓ should allow profile configuration overrides (17 ms)
      ✓ should get profile configuration
    Page Score Calculation
      ✓ should calculate basic page score (5 ms)
      ✓ should apply WCAG level weights correctly
      ✓ should apply severity penalties correctly
      ✓ should respect maximum penalty per issue
      ✕ should apply issue type multipliers (4 ms)
      ✓ should enforce minimum and maximum scores
    Coverage Assessment
      ✓ should calculate test coverage correctly
      ✓ should handle perfect coverage (1 ms)
      ✓ should handle empty pages gracefully
    Bonus System
      ✓ should award performance bonus for fast loading
      ✓ should award coverage bonus for excellent coverage
      ✓ should award no critical issues bonus
      ✓ should award perfect accessibility bonus
      ✓ should not award bonuses when disabled
    Penalty System
      ✓ should apply timeout penalties
      ✓ should apply scan error penalties
      ✓ should apply coverage penalties for low coverage
      ✓ should apply critical issue penalties for many critical issues
      ✓ should not apply penalties when disabled
    Site Score Calculation
      ✕ should calculate weighted site score (1 ms)
      ✕ should calculate average site score (1 ms)
      ✕ should calculate median site score
      ✕ should calculate worst-case site score
      ✕ should assign page importance correctly (1 ms)
    Site-wide Bonuses
      ✓ should award comprehensive scanning bonus
      ✓ should award consistency bonus for consistent scores
    Score Distribution
      ✕ should calculate score distribution correctly (1 ms)
    Consistency Metrics
      ✕ should identify outlier pages
      ✓ should identify common issues across site
    Configuration Management
      ✓ should update configuration dynamically
      ✓ should generate configuration checksum
      ✕ should include calculation timing (1 ms)
    Edge Cases
      ✓ should handle empty scan results
      ✓ should handle missing metadata gracefully
      ✓ should handle empty site scan results
      ✕ should handle single page sites
    Score Transparency
      ✓ should provide detailed score breakdown
      ✓ should explain score calculations (1 ms)

  ● AccessibilityScorer › Page Score Calculation › should apply issue type multipliers

    expect(received).toBeLessThan(expected)

    Expected: < 93
    Received:   93

      240 |       const genericScore = scorer.calculatePageScore(genericResult);
      241 |       
    > 242 |       expect(keyboardScore.finalScore).toBeLessThan(genericScore.finalScore);
          |                                        ^
      243 |     });
      244 |
      245 |     it('should enforce minimum and maximum scores', () => {

      at Object.<anonymous> (src/scoring/accessibility-scorer.test.ts:242:40)

  ● AccessibilityScorer › Site Score Calculation › should calculate weighted site score

    expect(received).toBeLessThan(expected)

    Expected: < 90
    Received:   93

      448 |       
      449 |       expect(siteScore.overallScore).toBeGreaterThan(70);
    > 450 |       expect(siteScore.overallScore).toBeLessThan(90);
          |                                      ^
      451 |       expect(siteScore.aggregationMethod).toBe('weighted');
      452 |       expect(siteScore.pageScores).toHaveLength(2);
      453 |     });

      at Object.<anonymous> (src/scoring/accessibility-scorer.test.ts:450:38)

  ● AccessibilityScorer › Site Score Calculation › should calculate average site score

    expect(received).toBe(expected) // Object.is equality

    Expected: 85
    Received: 93

      462 |       const siteScore = scorer.calculateSiteScore(crawlSession, scanResults, 'average');
      463 |       
    > 464 |       expect(siteScore.overallScore).toBe(85); // (80+90)/2
          |                                      ^
      465 |     });
      466 |
      467 |     it('should calculate median site score', () => {

      at Object.<anonymous> (src/scoring/accessibility-scorer.test.ts:464:38)

  ● AccessibilityScorer › Site Score Calculation › should calculate median site score

    expect(received).toBe(expected) // Object.is equality

    Expected: 80
    Received: 93

      475 |       const siteScore = scorer.calculateSiteScore(crawlSession, scanResults, 'median');
      476 |       
    > 477 |       expect(siteScore.overallScore).toBe(80); // Middle value
          |                                      ^
      478 |     });
      479 |
      480 |     it('should calculate worst-case site score', () => {

      at Object.<anonymous> (src/scoring/accessibility-scorer.test.ts:477:38)

  ● AccessibilityScorer › Site Score Calculation › should calculate worst-case site score

    expect(received).toBe(expected) // Object.is equality

    Expected: 60
    Received: 93

      488 |       const siteScore = scorer.calculateSiteScore(crawlSession, scanResults, 'worst');
      489 |       
    > 490 |       expect(siteScore.overallScore).toBe(60); // Minimum value
          |                                      ^
      491 |     });
      492 |
      493 |     it('should assign page importance correctly', () => {

      at Object.<anonymous> (src/scoring/accessibility-scorer.test.ts:490:38)

  ● AccessibilityScorer › Site Score Calculation › should assign page importance correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      523 |       expect(siteScore.pageScores[0]?.importance).toBe('critical'); // Home page
      524 |       expect(siteScore.pageScores[1]?.importance).toBe('high'); // Contact page
    > 525 |       expect(siteScore.pageScores[2]?.importance).toBe('low'); // Deep page
          |                                                   ^
      526 |     });
      527 |   });
      528 |

      at Object.<anonymous> (src/scoring/accessibility-scorer.test.ts:525:51)

  ● AccessibilityScorer › Score Distribution › should calculate score distribution correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 5

      570 |       const siteScore = scorer.calculateSiteScore(crawlSession, scanResults);
      571 |       
    > 572 |       expect(siteScore.distribution.ranges.excellent).toBe(1);
          |                                                       ^
      573 |       expect(siteScore.distribution.ranges.good).toBe(1);
      574 |       expect(siteScore.distribution.ranges.fair).toBe(1);
      575 |       expect(siteScore.distribution.ranges.poor).toBe(1);

      at Object.<anonymous> (src/scoring/accessibility-scorer.test.ts:572:55)

  ● AccessibilityScorer › Consistency Metrics › should identify outlier pages

    expect(received).toContain(expected) // indexOf

    Expected value: "https://example.com/outlier"
    Received array: []

      593 |       const siteScore = scorer.calculateSiteScore(crawlSession, scanResults);
      594 |       
    > 595 |       expect(siteScore.consistency.outlierPages).toContain('https://example.com/outlier');
          |                                                  ^
      596 |       expect(siteScore.consistency.consistencyScore).toBeLessThan(100);
      597 |     });
      598 |

      at Object.<anonymous> (src/scoring/accessibility-scorer.test.ts:595:50)

  ● AccessibilityScorer › Configuration Management › should include calculation timing

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      637 |       const breakdown = scorer.calculatePageScore(createMockScanResult());
      638 |       
    > 639 |       expect(breakdown.metadata.calculationTime).toBeGreaterThan(0);
          |                                                  ^
      640 |       expect(breakdown.metadata.calculatedAt).toBeDefined();
      641 |     });
      642 |   });

      at Object.<anonymous> (src/scoring/accessibility-scorer.test.ts:639:50)

  ● AccessibilityScorer › Edge Cases › should handle single page sites

    expect(received).toBe(expected) // Object.is equality

    Expected: 85
    Received: 93

      673 |       const siteScore = scorer.calculateSiteScore(crawlSession, scanResults);
      674 |       
    > 675 |       expect(siteScore.overallScore).toBe(85);
          |                                      ^
      676 |       expect(siteScore.distribution.median).toBe(85);
      677 |       expect(siteScore.consistency.scoreVariance).toBe(0);
      678 |     });

      at Object.<anonymous> (src/scoring/accessibility-scorer.test.ts:675:38)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.error
    [ERROR] validation: URL validation failed

      650 |       case 'error':
      651 |       case 'fatal':
    > 652 |         console.error(message);
          |                 ^
      653 |         if (error.stack && this.config.includeStackTraces) {
      654 |           console.error(error.stack);
      655 |         }

      at ErrorLogger.logToConsole (src/output/error-logger.ts:652:17)
      at ErrorLogger.logError (src/output/error-logger.ts:271:14)
      at ErrorLogger.error (src/output/error-logger.ts:306:17)
      at UrlValidator.validate (src/cli/url-validator.ts:168:24)
      at src/cli/url-validator.ts:189:32
          at Array.map (<anonymous>)
      at UrlValidator.validateMultiple (src/cli/url-validator.ts:189:14)
      at Object.<anonymous> (src/cli/url-validator.test.ts:308:39)

FAIL src/cli/config-manager-jsconfig.test.ts
  ConfigManager (JS config file, real fs)
    ✕ should load JavaScript configuration file (22 ms)

  ● ConfigManager (JS config file, real fs) › should load JavaScript configuration file

    ENOENT: no such file or directory, unlink '/Users/phillipclark/projects/a11yanalyze/.a11yanalyzerc.js'

      39 |       expect(result.config.browser.headless).toBe(false);
      40 |     } finally {
    > 41 |       fs.unlinkSync(configPath);
         |          ^
      42 |       for (const { orig, backup } of renamedFiles) {
      43 |         if (fs.existsSync(backup)) {
      44 |           fs.renameSync(backup, orig);

      at Object.<anonymous> (src/cli/config-manager-jsconfig.test.ts:41:10)

  console.error
    Error: Input must be a non-empty string
        at UrlValidator.normalizeInput (/Users/phillipclark/projects/a11yanalyze/src/cli/url-validator.ts:231:13)
        at UrlValidator.validate (/Users/phillipclark/projects/a11yanalyze/src/cli/url-validator.ts:116:36)
        at /Users/phillipclark/projects/a11yanalyze/src/cli/url-validator.ts:189:32
        at Array.map (<anonymous>)
        at UrlValidator.validateMultiple (/Users/phillipclark/projects/a11yanalyze/src/cli/url-validator.ts:189:14)
        at Object.<anonymous> (/Users/phillipclark/projects/a11yanalyze/src/cli/url-validator.test.ts:308:39)
        at Promise.then.completed (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at _runTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:121:9)
        at run (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/runTest.js:444:34)
        at Object.worker (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/testWorker.js:106:12)

      652 |         console.error(message);
      653 |         if (error.stack && this.config.includeStackTraces) {
    > 654 |           console.error(error.stack);
          |                   ^
      655 |         }
      656 |         break;
      657 |     }

      at ErrorLogger.logToConsole (src/output/error-logger.ts:654:19)
      at ErrorLogger.logError (src/output/error-logger.ts:271:14)
      at ErrorLogger.error (src/output/error-logger.ts:306:17)
      at UrlValidator.validate (src/cli/url-validator.ts:168:24)
      at src/cli/url-validator.ts:189:32
          at Array.map (<anonymous>)
      at UrlValidator.validateMultiple (src/cli/url-validator.ts:189:14)
      at Object.<anonymous> (src/cli/url-validator.test.ts:308:39)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.error
    [ERROR] validation: URL validation failed

      650 |       case 'error':
      651 |       case 'fatal':
    > 652 |         console.error(message);
          |                 ^
      653 |         if (error.stack && this.config.includeStackTraces) {
      654 |           console.error(error.stack);
      655 |         }

      at ErrorLogger.logToConsole (src/output/error-logger.ts:652:17)
      at ErrorLogger.logError (src/output/error-logger.ts:271:14)
      at ErrorLogger.error (src/output/error-logger.ts:306:17)
      at UrlValidator.validate (src/cli/url-validator.ts:168:24)
      at Object.<anonymous> (src/cli/url-validator.test.ts:377:42)

  console.error
    Error: Input must be a non-empty string
        at UrlValidator.normalizeInput (/Users/phillipclark/projects/a11yanalyze/src/cli/url-validator.ts:231:13)
        at UrlValidator.validate (/Users/phillipclark/projects/a11yanalyze/src/cli/url-validator.ts:116:36)
        at Object.<anonymous> (/Users/phillipclark/projects/a11yanalyze/src/cli/url-validator.test.ts:377:42)
        at Promise.then.completed (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at _runTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:121:9)
        at run (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/runTest.js:444:34)
        at Object.worker (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/testWorker.js:106:12)

      652 |         console.error(message);
      653 |         if (error.stack && this.config.includeStackTraces) {
    > 654 |           console.error(error.stack);
          |                   ^
      655 |         }
      656 |         break;
      657 |     }

      at ErrorLogger.logToConsole (src/output/error-logger.ts:654:19)
      at ErrorLogger.logError (src/output/error-logger.ts:271:14)
      at ErrorLogger.error (src/output/error-logger.ts:306:17)
      at UrlValidator.validate (src/cli/url-validator.ts:168:24)
      at Object.<anonymous> (src/cli/url-validator.test.ts:377:42)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

  console.info
    [INFO] system: Error logging session started

      at ErrorLogger.logToConsole (src/output/error-logger.ts:645:17)

FAIL src/output/json-reporter.test.ts
  JsonReporter
    Page Report Generation
      ✕ should generate a valid page report (9 ms)
      ✕ should include page metadata in report (1 ms)
      ✓ should include performance metrics (3 ms)
      ✓ should convert issues to report format
      ✓ should handle page report with custom options
      ✕ should handle scan result with errors (1 ms)
      ✕ should handle report generation errors gracefully
    Site Report Generation
      ✓ should generate a valid site report (1 ms)
      ✓ should include crawl session information (1 ms)
      ✓ should calculate site statistics correctly
      ✕ should generate page summaries
      ✕ should analyze site-wide issues (1 ms)
      ✓ should analyze WCAG compliance
    Executive Summary
      ✓ should calculate correct severity breakdown
      ✓ should calculate WCAG level breakdown
      ✕ should determine achieved WCAG level correctly (1 ms)
      ✓ should generate appropriate key recommendations
    Issue Processing
      ✓ should filter issues by severity correctly
      ✓ should categorize issues correctly
      ✓ should group similar issues when enabled
    Technical Details
      ✓ should include environment information (1 ms)
      ✓ should include scan configuration
    Error Handling
      ✓ should handle empty scan results gracefully
      ✕ should handle missing metadata gracefully
    Report Validation
      ✓ should have consistent metadata across report types
      ✕ should generate reports with proper timestamps
      ✓ should maintain data consistency between summary and details

  ● JsonReporter › Page Report Generation › should generate a valid page report

    expect(received).toMatchObject(expected)

    - Expected  - 1
    + Received  + 1

    @@ -9,11 +9,11 @@
          "version": "1.0.0",
        },
        "page": Object {
          "compliant": false,
          "score": 85,
    -     "title": "Test Page",
    +     "title": "Unknown Title",
          "url": "https://example.com",
        },
        "summary": Object {
          "compliant": false,
          "overallScore": 85,

      163 |       const report = await jsonReporter.generatePageReport(scanResult);
      164 |
    > 165 |       expect(report).toMatchObject({
          |                      ^
      166 |         metadata: {
      167 |           version: '1.0.0',
      168 |           type: 'page',

      at Object.<anonymous> (src/output/json-reporter.test.ts:165:22)

  ● JsonReporter › Page Report Generation › should include page metadata in report

    expect(received).toMatchObject(expected)

    - Expected  - 1
    + Received  + 1

    @@ -2,7 +2,7 @@
        "language": "en",
        "size": Object {
          "interactiveElements": 75,
          "totalElements": 150,
        },
    -   "title": "Test Page",
    +   "title": "Unknown",
      }

      199 |       const report = await jsonReporter.generatePageReport(scanResult);
      200 |
    > 201 |       expect(report.page?.metadata).toMatchObject({
          |                                     ^
      202 |         title: 'Test Page',
      203 |         language: 'en',
      204 |         size: {

      at Object.<anonymous> (src/output/json-reporter.test.ts:201:37)

  ● JsonReporter › Page Report Generation › should handle scan result with errors

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      272 |       const report = await jsonReporter.generatePageReport(scanResult);
      273 |
    > 274 |       expect(report.errors).toHaveLength(1);
          |                             ^
      275 |       expect(report.errors[0]).toMatchObject({
      276 |         type: 'scan',
      277 |         severity: 'error',

      at Object.<anonymous> (src/output/json-reporter.test.ts:274:29)

  ● JsonReporter › Page Report Generation › should handle report generation errors gracefully

    TypeError: Cannot read properties of null (reading 'url')

      73 |
      74 |     } catch (error) {
    > 75 |       return this.generateErrorReport(error, 'page', scanResult.url, startTime);
         |                                                                 ^
      76 |     }
      77 |   }
      78 |

      at JsonReporter.generatePageReport (src/output/json-reporter.ts:75:65)
      at Object.<anonymous> (src/output/json-reporter.test.ts:288:41)

  ● JsonReporter › Site Report Generation › should generate page summaries

    expect(received).toMatchObject(expected)

    - Expected  - 1
    + Received  + 1

    @@ -3,8 +3,8 @@
        "depth": 0,
        "errors": Array [],
        "loadTime": 500,
        "scanTime": 1000,
        "score": 85,
    -   "title": "Home Page",
    +   "title": "Unknown Title",
        "url": "https://example.com",
      }

      392 |
      393 |       const pageSummary = report.site?.pages[0];
    > 394 |       expect(pageSummary).toMatchObject({
          |                           ^
      395 |         url: 'https://example.com',
      396 |         title: 'Home Page',
      397 |         score: 85,

      at Object.<anonymous> (src/output/json-reporter.test.ts:394:27)

  ● JsonReporter › Site Report Generation › should analyze site-wide issues

    expect(received).toHaveLength(expected)

    Expected length: 2
    Received length: 1
    Received array:  [{"category": "images", "description": "Image missing alt text", "elements": [{"context": "Issue: Image missing alt text", "html": "<img src=\"test.jpg\">", "selector": "img", "text": undefined}, {"context": "Issue: Image missing alt text", "html": "<img src=\"test.jpg\">", "selector": "img", "text": undefined}], "helpUrl": "https://help.example.com/alt-text", "id": "alt-text-1", "impact": "Users with screen readers cannot understand the image content", "level": "AA", "occurrences": 2, "remediation": "Add descriptive alt text to the image", "severity": "critical", "title": "Image missing alt text", "wcagReference": "1.1.1"}]

      444 |       expect(report.site?.issuesAnalysis).toBeDefined();
      445 |       expect(report.site?.issuesAnalysis.mostCommonIssues).toBeDefined();
    > 446 |       expect(report.site?.issuesAnalysis.criticalIssues).toHaveLength(2); // Two critical issues
          |                                                          ^
      447 |       expect(report.site?.issuesAnalysis.issuesByCategory).toBeDefined();
      448 |     });
      449 |

      at Object.<anonymous> (src/output/json-reporter.test.ts:446:58)

  ● JsonReporter › Executive Summary › should determine achieved WCAG level correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "None"
    Received: "A"

      541 |
      542 |       const levelAReport = await jsonReporter.generatePageReport(levelAResult);
    > 543 |       expect(levelAReport.summary.achievedLevel).toBe('None'); // Has AA issues
          |                                                  ^
      544 |
      545 |       // Test Level AA achievement
      546 |       const levelAAResult = createMockScanResult({

      at Object.<anonymous> (src/output/json-reporter.test.ts:543:50)

  ● JsonReporter › Error Handling › should handle missing metadata gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Unknown"
    Received: "Unknown Title"

      694 |        const report = await jsonReporter.generatePageReport(scanResultWithoutMetadata);
      695 |
    > 696 |        expect(report.page?.title).toBe('Unknown');
          |                                   ^
      697 |        expect(report.page?.performance.loadTime).toBe(0);
      698 |      });
      699 |   });

      at Object.<anonymous> (src/output/json-reporter.test.ts:696:35)

  ● JsonReporter › Report Validation › should generate reports with proper timestamps

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      718 |       const generatedAt = new Date(report.metadata.generatedAt);
      719 |       expect(generatedAt.getTime()).toBeCloseTo(Date.now(), -3); // Within 1 second
    > 720 |       expect(report.metadata.generationTime).toBeGreaterThan(0);
          |                                              ^
      721 |     });
      722 |
      723 |     it('should maintain data consistency between summary and details', async () => {

      at Object.<anonymous> (src/output/json-reporter.test.ts:720:46)

FAIL src/cli/url-validator.test.ts
  UrlValidator
    Basic URL Validation
      ✕ should validate simple HTTP URLs (47 ms)
      ✕ should validate simple HTTPS URLs (1 ms)
      ✕ should auto-add HTTPS protocol (1 ms)
      ✕ should auto-add HTTP for localhost (1 ms)
      ✓ should validate complex URLs (1 ms)
    Input Normalization
      ✓ should fix common typos (1 ms)
      ✕ should handle whitespace (1 ms)
      ✕ should add www suggestions
    Protocol Validation
      ✓ should reject unsupported protocols with strict validator (1 ms)
      ✓ should accept HTTP and HTTPS by default (1 ms)
      ✓ should accept additional protocols with lenient validator (13 ms)
    Domain Validation
      ✕ should validate localhost
      ✕ should reject localhost with strict validator (1 ms)
      ✕ should validate IP addresses (1 ms)
      ✕ should validate IPv6 addresses (1 ms)
      ✓ should reject invalid IP addresses (1 ms)
      ✓ should reject domains without TLD
      ✕ should warn about suspicious domains
    Port Validation
      ✓ should allow standard ports
      ✓ should allow non-standard ports by default
      ✕ should reject non-standard ports with strict validator (1 ms)
    Security Validation
      ✕ should warn about HTTP for non-localhost (1 ms)
      ✕ should reject path traversal patterns
    Accessibility Validation
      ✕ should warn about tracking parameters (1 ms)
      ✕ should warn about text fragments
      ✕ should warn about very long URLs (1 ms)
    Format Validation
      ✓ should reject empty strings (4 ms)
      ✓ should reject very long URLs (1 ms)
      ✓ should reject URLs without protocol (2 ms)
    Auto-correction Suggestions
      ✓ should suggest protocol additions (1 ms)
      ✓ should suggest typo corrections (1 ms)
      ✓ should suggest www additions (12 ms)
    Multiple URL Validation
      ✓ should validate multiple URLs (3 ms)
      ✓ should handle empty array (1 ms)
      ✓ should handle validation errors gracefully (3 ms)
    Quick Validation
      ✓ should quickly validate valid URLs
      ✕ should quickly reject invalid URLs (1 ms)
    Preset Configurations
      ✓ should create strict validator (1 ms)
      ✓ should create lenient validator
      ✓ should create development validator (1 ms)
    Error Handling
      ✓ should handle malformed input gracefully
      ✓ should handle special characters (1 ms)
      ✕ should handle null and undefined (1 ms)
    Custom Configuration
      ✓ should respect custom allowed protocols (1 ms)
      ✓ should respect custom max length (1 ms)
      ✓ should disable auto-normalization when configured
  UrlErrorFormatter
    Error Formatting
      ✓ should format validation errors
      ✓ should return empty string for valid results
    Warning Formatting
      ✓ should format warnings (1 ms)
      ✓ should return empty string when no warnings
    Success Formatting
      ✓ should format successful validation
      ✓ should include warnings in success message
      ✓ should return empty string for invalid results

  ● UrlValidator › Basic URL Validation › should validate simple HTTP URLs

    expect(received).toBe(expected) // Object.is equality

    Expected: "http://example.com"
    Received: "http://example.com/"

      18 |       
      19 |       expect(result.isValid).toBe(true);
    > 20 |       expect(result.normalizedUrl).toBe('http://example.com');
         |                                    ^
      21 |     });
      22 |
      23 |     it('should validate simple HTTPS URLs', async () => {

      at Object.<anonymous> (src/cli/url-validator.test.ts:20:36)

  ● UrlValidator › Basic URL Validation › should validate simple HTTPS URLs

    expect(received).toBe(expected) // Object.is equality

    Expected: "https://example.com"
    Received: "https://example.com/"

      25 |       
      26 |       expect(result.isValid).toBe(true);
    > 27 |       expect(result.normalizedUrl).toBe('https://example.com');
         |                                    ^
      28 |     });
      29 |
      30 |     it('should auto-add HTTPS protocol', async () => {

      at Object.<anonymous> (src/cli/url-validator.test.ts:27:36)

  ● UrlValidator › Basic URL Validation › should auto-add HTTPS protocol

    expect(received).toBe(expected) // Object.is equality

    Expected: "https://example.com"
    Received: "https://example.com/"

      32 |       
      33 |       expect(result.isValid).toBe(true);
    > 34 |       expect(result.normalizedUrl).toBe('https://example.com');
         |                                    ^
      35 |     });
      36 |
      37 |     it('should auto-add HTTP for localhost', async () => {

      at Object.<anonymous> (src/cli/url-validator.test.ts:34:36)

  ● UrlValidator › Basic URL Validation › should auto-add HTTP for localhost

    expect(received).toBe(expected) // Object.is equality

    Expected: "http://localhost:3000"
    Received: "http://localhost:3000/"

      39 |       
      40 |       expect(result.isValid).toBe(true);
    > 41 |       expect(result.normalizedUrl).toBe('http://localhost:3000');
         |                                    ^
      42 |     });
      43 |
      44 |     it('should validate complex URLs', async () => {

      at Object.<anonymous> (src/cli/url-validator.test.ts:41:36)

  ● UrlValidator › Input Normalization › should handle whitespace

    expect(received).toBe(expected) // Object.is equality

    Expected: "https://example.com"
    Received: "https://example.com/"

      69 |       
      70 |       expect(result.isValid).toBe(true);
    > 71 |       expect(result.normalizedUrl).toBe('https://example.com');
         |                                    ^
      72 |     });
      73 |
      74 |     it('should add www suggestions', async () => {

      at Object.<anonymous> (src/cli/url-validator.test.ts:71:36)

  ● UrlValidator › Input Normalization › should add www suggestions

    expect(received).toBe(expected) // Object.is equality

    Expected: "https://example.com"
    Received: "https://example.com/"

      77 |       expect(result.isValid).toBe(true);
      78 |       // Should normalize to https://example.com without www
    > 79 |       expect(result.normalizedUrl).toBe('https://example.com');
         |                                    ^
      80 |     });
      81 |   });
      82 |

      at Object.<anonymous> (src/cli/url-validator.test.ts:79:36)

  ● UrlValidator › Domain Validation › should validate localhost

    expect(received).toContain(expected) // indexOf

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      112 |       
      113 |       expect(result.isValid).toBe(true);
    > 114 |       expect(result.warnings).toContain('Using localhost - this URL will only work on your local machine');
          |                               ^
      115 |     });
      116 |
      117 |     it('should reject localhost with strict validator', async () => {

      at Object.<anonymous> (src/cli/url-validator.test.ts:114:31)

  ● UrlValidator › Domain Validation › should reject localhost with strict validator

    expect(received).toBe(expected) // Object.is equality

    Expected: "domain"
    Received: "protocol"

      120 |       
      121 |       expect(result.isValid).toBe(false);
    > 122 |       expect(result.error?.type).toBe('domain');
          |                                  ^
      123 |     });
      124 |
      125 |     it('should validate IP addresses', async () => {

      at Object.<anonymous> (src/cli/url-validator.test.ts:122:34)

  ● UrlValidator › Domain Validation › should validate IP addresses

    expect(received).toContain(expected) // indexOf

    Expected value: "Using IP address - consider using a domain name for better accessibility"
    Received array: ["Consider using HTTPS for better security (recommended for accessibility testing)"]

      127 |       
      128 |       expect(result.isValid).toBe(true);
    > 129 |       expect(result.warnings).toContain('Using IP address - consider using a domain name for better accessibility');
          |                               ^
      130 |     });
      131 |
      132 |     it('should validate IPv6 addresses', async () => {

      at Object.<anonymous> (src/cli/url-validator.test.ts:129:31)

  ● UrlValidator › Domain Validation › should validate IPv6 addresses

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      133 |       const result = await validator.validate('http://[::1]');
      134 |       
    > 135 |       expect(result.isValid).toBe(true);
          |                              ^
      136 |     });
      137 |
      138 |     it('should reject invalid IP addresses', async () => {

      at Object.<anonymous> (src/cli/url-validator.test.ts:135:30)

  ● UrlValidator › Domain Validation › should warn about suspicious domains

    expect(received).toContain(expected) // indexOf

    Expected value: "may be a URL shortener"
    Received array: ["Consider using HTTPS for better security (recommended for accessibility testing)"]

      154 |       
      155 |       expect(result.isValid).toBe(true);
    > 156 |       expect(result.warnings).toContain('may be a URL shortener');
          |                               ^
      157 |     });
      158 |   });
      159 |

      at Object.<anonymous> (src/cli/url-validator.test.ts:156:31)

  ● UrlValidator › Port Validation › should reject non-standard ports with strict validator

    expect(received).toBe(expected) // Object.is equality

    Expected: "domain"
    Received: "protocol"

      178 |       
      179 |       expect(result.isValid).toBe(false);
    > 180 |       expect(result.error?.type).toBe('domain');
          |                                  ^
      181 |       expect(result.error?.message).toContain('Non-standard port');
      182 |     });
      183 |   });

      at Object.<anonymous> (src/cli/url-validator.test.ts:180:34)

  ● UrlValidator › Security Validation › should warn about HTTP for non-localhost

    expect(received).toContain(expected) // indexOf

    Expected value: "Consider using HTTPS"
    Received array: ["Consider using HTTPS for better security (recommended for accessibility testing)"]

      188 |       
      189 |       expect(result.isValid).toBe(true);
    > 190 |       expect(result.warnings).toContain('Consider using HTTPS');
          |                               ^
      191 |     });
      192 |
      193 |     it('should reject path traversal patterns', async () => {

      at Object.<anonymous> (src/cli/url-validator.test.ts:190:31)

  ● UrlValidator › Security Validation › should reject path traversal patterns

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      194 |       const result = await validator.validate('https://example.com/../../../etc/passwd');
      195 |       
    > 196 |       expect(result.isValid).toBe(false);
          |                              ^
      197 |       expect(result.error?.type).toBe('security');
      198 |       expect(result.error?.message).toContain('path traversal');
      199 |     });

      at Object.<anonymous> (src/cli/url-validator.test.ts:196:30)

  ● UrlValidator › Accessibility Validation › should warn about tracking parameters

    expect(received).toContain(expected) // indexOf

    Expected value: "tracking parameters"
    Received array: ["URL contains tracking parameters that might affect accessibility testing accuracy"]

      211 |         const result = await validator.validate(url);
      212 |         expect(result.isValid).toBe(true);
    > 213 |         expect(result.warnings).toContain('tracking parameters');
          |                                 ^
      214 |       }
      215 |     });
      216 |

      at Object.<anonymous> (src/cli/url-validator.test.ts:213:33)

  ● UrlValidator › Accessibility Validation › should warn about text fragments

    expect(received).toContain(expected) // indexOf

    Expected value: "text fragments"
    Received array: ["URL contains tracking parameters that might affect accessibility testing accuracy", "URL contains text fragments - ensure these work with screen readers"]

      219 |       
      220 |       expect(result.isValid).toBe(true);
    > 221 |       expect(result.warnings).toContain('text fragments');
          |                               ^
      222 |     });
      223 |
      224 |     it('should warn about very long URLs', async () => {

      at Object.<anonymous> (src/cli/url-validator.test.ts:221:31)

  ● UrlValidator › Accessibility Validation › should warn about very long URLs

    expect(received).toContain(expected) // indexOf

    Expected value: "Very long URLs"
    Received array: ["Very long URLs may cause issues with some accessibility tools"]

      227 |       
      228 |       expect(result.isValid).toBe(true);
    > 229 |       expect(result.warnings).toContain('Very long URLs');
          |                               ^
      230 |     });
      231 |   });
      232 |

      at Object.<anonymous> (src/cli/url-validator.test.ts:229:31)

  ● UrlValidator › Quick Validation › should quickly reject invalid URLs

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      321 |
      322 |     it('should quickly reject invalid URLs', () => {
    > 323 |       expect(validator.isValidUrl('invalid')).toBe(false);
          |                                               ^
      324 |       expect(validator.isValidUrl('')).toBe(false);
      325 |       expect(validator.isValidUrl('ftp://example.com')).toBe(false); // Not in default allowed protocols
      326 |     });

      at Object.<anonymous> (src/cli/url-validator.test.ts:323:47)

  ● UrlValidator › Error Handling › should handle null and undefined

    TypeError: Cannot read properties of null (reading 'includes')

      518 |     // Check for common typos
      519 |     for (const [typo, correction] of UrlValidator.COMMON_TYPOS) {
    > 520 |       if (input.includes(typo)) {
          |                 ^
      521 |         suggestions.push(input.replace(typo, correction));
      522 |       }
      523 |     }

      at UrlValidator.generateSuggestions (src/cli/url-validator.ts:520:17)
      at UrlValidator.validate (src/cli/url-validator.ts:177:23)
      at Object.<anonymous> (src/cli/url-validator.test.ts:377:42)

PASS src/utils/browser-manager.test.ts
  BrowserManager
    Configuration
      ✓ should apply default configuration values (2 ms)
      ✓ should override defaults with provided config
    Browser Initialization
      ✓ should initialize browser successfully (29 ms)
      ✓ should throw error if browser already initialized (6 ms)
      ✓ should handle browser launch failure
    Page Management
      ✓ should create page successfully (1 ms)
      ✓ should throw error when creating page without initialization (1 ms)
      ✓ should close page and update count
      ✓ should handle page creation failure
    Navigation
      ✓ should navigate successfully
      ✓ should handle navigation timeout with retries (102 ms)
      ✓ should categorize different error types
      ✓ should return navigation result with resources array (1 ms)
    Event Handling
      ✓ should emit browser events
      ✓ should emit page events
      ✓ should handle page JavaScript errors
      ✓ should handle console messages
    Status and Cleanup
      ✓ should report correct status when uninitialized (1 ms)
      ✓ should report correct status when initialized
      ✓ should cleanup resources properly
      ✓ should handle cleanup errors gracefully

FAIL src/cli/config-manager.test.ts
  ConfigManager
    Default Configuration
      ✓ should provide sensible default configuration (7 ms)
      ✓ should include only default source when no other config found (32 ms)
      ✓ should provide static access to default config
    Configuration File Loading
      ✓ should load JSON configuration file
      ✕ should load JavaScript configuration file (22 ms)
      ✕ should load configuration from package.json (1 ms)
      ✓ should handle file loading errors gracefully
      ✓ should handle invalid JSON gracefully
    Environment Variable Loading
      ✓ should load configuration from environment variables (1 ms)
      ✓ should parse different environment variable types correctly
      ✕ should handle invalid environment variables with warnings (1 ms)
    CLI Options Loading
      ✓ should load configuration from CLI options
      ✓ should parse viewport string correctly
      ✓ should handle invalid viewport format gracefully
    Configuration Priority and Merging
      ✓ should apply configuration sources in correct priority order (1 ms)
      ✓ should deeply merge nested configuration objects
    Configuration Validation
      ✓ should validate WCAG level
      ✓ should validate scoring profile
      ✓ should validate timeout values
      ✓ should validate viewport dimensions
      ✓ should validate crawling configuration (5 ms)
    Configuration Generation and Saving
      ✓ should generate sample JSON configuration (1 ms)
      ✓ should generate sample JavaScript configuration
      ✓ should generate sample YAML configuration (2 ms)
      ✕ should save configuration to file (5 ms)
      ✓ should handle save errors gracefully (5 ms)
    Configuration Access and State
      ✓ should return null when no config is loaded (1 ms)
      ✓ should return loaded config after loading
      ✓ should return configuration sources information
      ✓ should preserve configuration between calls
    Error Handling and Edge Cases
      ✓ should handle empty configuration files
      ✓ should handle malformed package.json
      ✓ should handle empty search paths gracefully
      ✓ should handle undefined CLI options gracefully (1 ms)
      ✓ should recover from total configuration failure

  ● ConfigManager › Configuration File Loading › should load JavaScript configuration file

    expect(received).toBe(expected) // Object.is equality

    Expected: "A"
    Received: "AA"

      142 |       try {
      143 |         const result = await configManager.loadConfig();
    > 144 |         expect(result.config.scanning.wcagLevel).toBe('A');
          |                                                  ^
      145 |         expect(result.config.browser.headless).toBe(false);
      146 |       } finally {
      147 |         fs.unlinkSync(configPath);

      at Object.<anonymous> (src/cli/config-manager.test.ts:144:50)

  ● ConfigManager › Configuration File Loading › should load configuration from package.json

    expect(received).toBe(expected) // Object.is equality

    Expected: "AAA"
    Received: "AA"

      158 |       mockPath.resolve.mockImplementation((...args: string[]) => args.join('/'));
      159 |       const result = await configManager.loadConfig();
    > 160 |       expect(result.config.scanning.wcagLevel).toBe('AAA');
          |                                                ^
      161 |       expect(result.config.scanning.includeAAA).toBe(true);
      162 |       expect(result.config.scoring.profile).toBe('strict');
      163 |     });

      at Object.<anonymous> (src/cli/config-manager.test.ts:160:48)

  ● ConfigManager › Environment Variable Loading › should handle invalid environment variables with warnings

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      233 |       const result = await configManager.loadConfig();
      234 |
    > 235 |       expect(result.warnings.length).toBeGreaterThan(0);
          |                                      ^
      236 |       expect(result.warnings.some(w => w.includes('A11Y_TIMEOUT'))).toBe(true);
      237 |     });
      238 |   });

      at Object.<anonymous> (src/cli/config-manager.test.ts:235:38)

  ● ConfigManager › Configuration Generation and Saving › should save configuration to file

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-config.json", StringContaining "\"wcagLevel\": \"AAA\"", "utf8"
    Received: "test-config.json", "{
      \"scanning\": {
        \"wcagLevel\": \"AA\",
        \"includeAAA\": false,
        \"includeARIA\": true,
        \"includeWarnings\": true,
        \"timeout\": 30000,
        \"retries\": 2,
        \"retryDelay\": 1000,
        \"waitForNetworkIdle\": true,
        \"captureScreenshots\": false,
        \"screenshotOnFailure\": true,
        \"customRules\": [],
        \"disabledRules\": []
      },
      \"browser\": {
        \"headless\": true,
        \"viewport\": {
          \"width\": 1280,
          \"height\": 720
        },
        \"userAgent\": \"A11yAnalyze/1.0.0 (Accessibility Testing Tool)\",
        \"enableJavaScript\": true,
        \"allowInsecure\": false,
        \"locale\": \"en-US\",
        \"timezone\": \"UTC\"
      },
      \"crawling\": {
        \"maxDepth\": 2,
        \"maxPages\": 50,
        \"maxConcurrency\": 3,
        \"requestDelay\": 1000,
        \"respectRobotsTxt\": false,
        \"followRedirects\": true,
        \"allowedDomains\": [],
        \"excludedDomains\": [],
        \"excludedPaths\": [],
        \"includedPaths\": [],
        \"useSitemaps\": false,
        \"discoverExternalLinks\": false,
        \"maxExternalDepth\": 1
      },
      \"output\": {
        \"format\": \"console\",
        \"verbose\": false,
        \"quiet\": false,
        \"debug\": false,
        \"colors\": true,
        \"timestamps\": false,
        \"progressBars\": true,
        \"exportErrors\": false
      },
      \"scoring\": {
        \"profile\": \"balanced\",
        \"minScore\": 0,
        \"maxScore\": 100,
        \"enableBonuses\": true,
        \"enablePenalties\": true,
        \"minSeverity\": \"moderate\"
      },
      \"issues\": {
        \"groupSimilar\": true,
        \"includeRemediation\": true,
        \"includeCodeExamples\": true,
        \"includeTestingGuidance\": true,
        \"contextAware\": true,
        \"maxCodeExamples\": 3,
        \"priorityMode\": \"impact\"
      },
      \"performance\": {
        \"enableCircuitBreaker\": true,
        \"circuitBreakerThreshold\": 5,
        \"maxRetries\": 3,
        \"baseRetryDelay\": 1000,
        \"timeoutStrategy\": \"adaptive\",
        \"memoryLimit\": 512,
        \"resourceCleanup\": true
      },
      \"advanced\": {
        \"experimentalFeatures\": false,
        \"cacheResults\": false,
        \"cacheTTL\": 3600,
        \"telemetry\": false,
        \"updateCheck\": true,
        \"configVersion\": \"1.0.0\"
      },
      \"vpat\": {
        \"enabled\": false,
        \"mode\": \"component\",
        \"outputFormat\": \"json\",
        \"section508\": true,
        \"remarks\": true,
        \"jiraIntegration\": false
      },
      \"storybook\": {
        \"enabled\": false,
        \"url\": \"\",
        \"iframeSelector\": \"#storybook-preview-iframe\",
        \"componentIsolation\": true,
        \"autoDiscover\": true
      },
      \"reporting\": {
        \"format\": \"json\",
        \"jiraIntegration\": false,
        \"includeScreenshots\": true,
        \"includeSummary\": true
      }
    }", "utf8"

    Number of calls: 1

      472 |       await configManager.saveConfig(customConfig, 'test-config.json');
      473 |
    > 474 |       expect(mockFs.writeFileSync).toHaveBeenCalledWith(
          |                                    ^
      475 |         'test-config.json',
      476 |         expect.stringContaining('"wcagLevel": "AAA"'),
      477 |         'utf8'

      at Object.<anonymous> (src/cli/config-manager.test.ts:474:36)

  console.log
    
    🚀 Getting Started with A11Y Analyze

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Learn the basics of accessibility testing with our comprehensive tool. This quick start guide will help you run your first scan and interpret results.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Quick Start

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Get up and running with accessibility testing in minutes. Run a basic scan, review the output, and explore further options.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Basic Page Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Scan a single page with default settings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Verbose Output:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Get detailed progress information

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --verbose

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Quick Start Example:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Scan an e-commerce site and output both console and JSON reports

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://ecommerce.example.com --format both

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Start with a single page scan to understand the tool

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Use --verbose to see detailed progress information

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Check the exit code: 0 = success, 1 = issues found

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • See practical examples: a11yanalyze help examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • For troubleshooting, see: a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Understanding Results

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Learn how to interpret accessibility scan results. The tool provides a score, issue breakdown, and remediation tips.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Issues are categorized by WCAG level (A, AA, AAA)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Severity levels: critical, serious, moderate, minor, warning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Scores range from 0-100, with 80+ considered good

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Each issue includes remediation guidance and help URLs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • See also: a11yanalyze help reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      First Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Perform your first accessibility scan

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://example.com --format both

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scans a page and shows results both in console and JSON format

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Expected: Console output with score and JSON report

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      E-commerce Quick Start:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan an e-commerce product page for accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://shop.example.com/product/123 --include-aaa --screenshot

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive scan including AAA guidelines with screenshot capture

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Expected: Accessibility issues, warnings, and screenshot saved

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help scanning, a11yanalyze help configuration, a11yanalyze help examples, a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔍 Single Page Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Comprehensive guide to scanning individual pages for accessibility issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Basic Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Essential options for page scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Standard Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      WCAG 2.2 AA compliance scan with default settings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Include AAA level guidelines for comprehensive testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --wcag-level AAA --include-aaa

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Output Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Control how results are displayed and saved

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Save JSON Report:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save detailed results to a JSON file

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Multiple Formats:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Show console output and save JSON report

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --format both --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Use --quiet for minimal output in CI/CD pipelines

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • JSON reports contain more detailed information than console output

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Screenshots can be captured with --screenshot flag

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Advanced Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Fine-tune scanning behavior for specific needs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Custom Viewport:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test with specific viewport size and extended timeout

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --viewport 1920x1080 --timeout 60000

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Strict Scoring:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Use strict scoring and only report serious+ issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --profile strict --min-severity serious

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      E-commerce Site Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan an e-commerce product page

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://shop.example.com/product/123 --include-aaa --screenshot

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive scan including AAA guidelines with screenshot capture

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Mobile Testing:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Test mobile responsiveness

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://example.com --viewport 375x667

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan with mobile viewport (iPhone SE dimensions)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help crawling, a11yanalyze help configuration, a11yanalyze help scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🕷️ Website Crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Comprehensive site-wide accessibility analysis

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Basic Crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Start crawling websites for comprehensive accessibility analysis

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Simple Site Crawl:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Crawl up to 2 levels deep, maximum 50 pages

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Deep Crawl:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Deeper crawl with higher page limit

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com --depth 4 --max-pages 200

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Crawl Control

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Control which pages are crawled and how

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Domain Restrictions:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Only crawl specific domains

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com --allowed-domains example.com,blog.example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Path Filtering:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Exclude admin/API paths, focus on product pages

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com --exclude-paths /admin,/api --include-paths /products

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Use --respect-robots to honor robots.txt directives

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Adjust --concurrency based on server capacity

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Use --delay to be respectful of server resources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Performance Tuning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Optimize crawling performance and resource usage

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      High Performance:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Faster crawling with higher concurrency

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com --concurrency 5 --delay 500

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Conservative Crawling:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Gentle crawling that respects server resources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com --concurrency 1 --delay 2000 --respect-robots

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Corporate Website Audit:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive audit of a corporate website

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze crawl https://company.com --depth 3 --max-pages 100 --output audit-report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Deep crawl for comprehensive accessibility audit with detailed reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Blog Analysis:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Analyze a blog while respecting resources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze crawl https://blog.example.com --include-paths /posts --delay 1000 --respect-robots

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Focus on blog posts with respectful crawling behavior

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help scanning, a11yanalyze help configuration, a11yanalyze help best-practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    ⚙️ Configuration Guide

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Complete guide to configuring A11Y Analyze for your needs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Configuration Sources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Multiple ways to configure the tool, in priority order

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      CLI Arguments (Highest Priority):

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Command-line arguments override all other settings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --wcag-level AAA --timeout 45000

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Environment Variables:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Environment variables for deployment configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      export A11Y_WCAG_LEVEL=AAA
      export A11Y_TIMEOUT=45000
      a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Configuration File:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save as .a11yanalyzerc.json for project configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      {
        "scanning": {
          "wcagLevel": "AAA",
          "timeout": 45000
        },
        "output": {
          "format": "json",
          "verbose": true
        }
      }

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Configuration Files

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Different configuration file formats and locations

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      JSON Configuration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      JSON format configuration file

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      # Create configuration file
      echo '{"scanning": {"wcagLevel": "AAA"}}' > .a11yanalyzerc.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      JavaScript Configuration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save as .a11yanalyzerc.js or a11yanalyze.config.js

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      module.exports = {
        scanning: {
          wcagLevel: "AAA",
          includeAAA: true
        },
        browser: {
          viewport: { width: 1920, height: 1080 }
        }
      };

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Package.json Integration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Add configuration to existing package.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      {
        "name": "my-project",
        "a11yanalyze": {
          "scanning": {
            "wcagLevel": "AAA"
          }
        }
      }

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Generate Configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Create sample configuration files

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Generate Sample Config:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Generate a sample configuration file (future feature)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze config --generate --format json > .a11yanalyzerc.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Team Configuration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Set up consistent configuration for a development team

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ echo '{"scanning": {"wcagLevel": "AA", "includeAAA": true}, "scoring": {"profile": "balanced"}}' > .a11yanalyzerc.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Create team configuration with AA compliance plus AAA warnings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help getting-started, a11yanalyze help best-practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    📊 Scoring System

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Understanding and customizing accessibility scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Scoring Profiles

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Pre-configured scoring approaches for different use cases

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Balanced Profile (Default):

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Fair scoring suitable for most projects

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --profile balanced

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Strict Profile:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Strict scoring for compliance-critical applications

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --profile strict

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Lenient Profile:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      More forgiving scoring for development environments

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --profile lenient

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Score Interpretation

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Understanding what accessibility scores mean

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • 90-100: Excellent accessibility (few or no issues)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • 80-89: Good accessibility (minor issues to address)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • 70-79: Fair accessibility (several issues need attention)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • 60-69: Poor accessibility (significant issues present)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • 0-59: Critical accessibility problems (immediate attention needed)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Customizing Scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Fine-tune scoring for your specific needs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Severity Filtering:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Only consider serious and critical issues in scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --min-severity serious

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Government Compliance:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Strict scoring for government accessibility compliance

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://gov-site.example.com --profile strict --wcag-level AAA

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Use strict scoring with AAA compliance for government standards

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help scanning, a11yanalyze help configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    📋 Reports and Output

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Generate and customize accessibility reports

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Output Formats

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Choose the right output format for your needs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Console Output:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Human-readable output in terminal

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --format console

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      JSON Report:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Machine-readable JSON format for integration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --format json --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Both Formats:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Show console output and save JSON report

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --format both --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Report Contents

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Understanding what's included in reports

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Executive summary with overall score and issue counts

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Detailed issue listings with WCAG references

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Remediation guidance and help URLs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Performance metrics and scan metadata

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Compliance breakdown by WCAG level

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Error Logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Track and debug scanning issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Export Error Log:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save technical errors and warnings to file

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --export-errors errors.log

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      CI/CD Integration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Generate reports suitable for continuous integration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://staging.example.com --format json --quiet --output ci-report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

FAIL src/output/error-logger.test.ts
  ● Test suite failed to run

    [96msrc/output/error-logger.test.ts[0m:[93m133[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m133[0m       expect(errors[0].details).toBe('Test error');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m134[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m134[0m       expect(errors[0].stack).toBeTruthy();
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m146[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m146[0m       expect(errors[0].level).toBe('fatal');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m201[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m201[0m       expect(errors[0].category).toBe('browser');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m202[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m202[0m       expect(errors[0].source).toBe('browser-manager');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m203[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m203[0m       expect(errors[0].url).toBe('https://example.com');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m204[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m204[0m       expect(errors[0].recoveryAction).toBe('Restarted browser');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m205[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m205[0m       expect(errors[0].recovered).toBe(true);
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m214[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m214[0m       expect(errors[0].category).toBe('network');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m215[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m215[0m       expect(errors[0].source).toBe('network');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m216[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m216[0m       expect(errors[0].context?.responseCode).toBe(504);
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m225[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m225[0m       expect(errors[0].category).toBe('scanning');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m226[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m226[0m       expect(errors[0].source).toBe('page-scanner');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m227[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m227[0m       expect(errors[0].context?.scanPhase).toBe('axe-analysis');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m236[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m236[0m       expect(errors[0].category).toBe('crawling');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m237[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m237[0m       expect(errors[0].source).toBe('site-crawler');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m238[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m238[0m       expect(errors[0].context?.depth).toBe(3);
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m246[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m246[0m       expect(errors[0].category).toBe('timeout');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m247[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m247[0m       expect(errors[0].level).toBe('warn');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m248[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m248[0m       expect(errors[0].source).toBe('timeout-handler');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m249[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m249[0m       expect(errors[0].context?.timeout).toBe(30000);
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m250[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m250[0m       expect(errors[0].recoveryAction).toBe('Increased timeout to 60s');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m251[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m251[0m       expect(errors[0].recovered).toBe(true);
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m278[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m278[0m       expect(issues[0].type).toBe('performance');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m279[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m279[0m       expect(issues[0].severity).toBe('high');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m280[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m280[0m       expect(issues[0].title).toBe('Page Load Performance Issue');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m281[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m281[0m       expect(issues[0].occurrenceCount).toBe(1);
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m282[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m282[0m       expect(issues[0].suggestedFixes).toContain('Optimize images');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m309[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m309[0m       expect(issues[0].occurrenceCount).toBe(2);
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m310[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m310[0m       expect(issues[0].affectedUrls).toContain('https://example.com/page1');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m311[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m311[0m       expect(issues[0].affectedUrls).toContain('https://example.com/page2');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m386[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m386[0m       expect(stats.frequentErrors[0].message).toBe('Common error');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m387[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m387[0m       expect(stats.frequentErrors[0].count).toBe(3);
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m388[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m388[0m       expect(stats.frequentErrors[1].message).toBe('Rare error');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m389[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m389[0m       expect(stats.frequentErrors[1].count).toBe(1);
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m426[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m426[0m       expect(debugErrors[0].level).toBe('debug');
    [7m   [0m [91m             ~~~~~~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m429[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m429[0m       expect(errorLevelErrors[0].level).toBe('error');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m444[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m444[0m       expect(systemFatalErrors[0].level).toBe('fatal');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m445[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m445[0m       expect(systemFatalErrors[0].category).toBe('system');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m651[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'timeoutIssue' is possibly 'undefined'.

    [7m651[0m       expect(timeoutIssue.technicalDetails.category).toBe('timeout');
    [7m   [0m [91m             ~~~~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m652[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'timeoutIssue' is possibly 'undefined'.

    [7m652[0m       expect(timeoutIssue.affectedUrls).toContain('https://example.com');
    [7m   [0m [91m             ~~~~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m668[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m668[0m       expect(errors[0].recovered).toBe(true);
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m669[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m669[0m       expect(errors[0].recoveryAction).toBe('Restarted browser');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m679[0m:[93m7[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m679[0m       errors[0].recovered = false;
    [7m   [0m [91m      ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m706[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m706[0m       expect(errors[0].context).toEqual(context);
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m713[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m713[0m       expect(errors[0].context).toBeUndefined();
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96msrc/output/error-logger.test.ts[0m:[93m714[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m714[0m       expect(errors[0].source).toBe('unknown'); // Default source
    [7m   [0m [91m             ~~~~~~~~~[0m

  console.log
      Quiet mode with JSON output perfect for automated pipelines

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help scanning, a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔧 Troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Solve common issues and get help when things go wrong. Includes timeout, error, and debug guidance.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Common Issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Solutions to frequently encountered problems. Includes timeout, error, and debug tips.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Timeout errors: Increase --timeout value for slow pages

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Network errors: Check internet connection and URL accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Permission errors: Ensure proper file write permissions for output

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Memory issues: Reduce --concurrency or --max-pages for large sites

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • For API and integration help, see: a11yanalyze help api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    ⚠️  Warnings:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Some sites block automated tools - check robots.txt

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • CAPTCHA or login requirements may prevent scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Heavy JavaScript sites may need longer timeouts

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • If you see ambiguous roles in screen reader simulation, review the Known Limitations section in the README.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Debugging Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Get more information when things go wrong. Use debug and verbose output, and export error logs.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Debug Mode:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Enable detailed debug logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --debug

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Verbose Output:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Verbose mode with error log export

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --verbose --export-errors debug.log

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Timeout Example:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Increase timeout for slow-loading sites

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://slow-site.com --timeout 120000

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Getting Help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    When you need additional support. See the README or use the API help topic.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

FAIL src/scanner/rule-engine.test.ts
  ● Test suite failed to run

    [96msrc/scanner/rule-engine.test.ts[0m:[93m32[0m:[93m9[0m - [91merror[0m[90m TS2740: [0mType '{}' is missing the following properties from type 'AxeConfigRule[]': length, pop, push, concat, and 29 more.

    [7m32[0m         rules: {},
    [7m  [0m [91m        ~~~~~[0m
    [96msrc/scanner/rule-engine.test.ts[0m:[93m60[0m:[93m11[0m - [91merror[0m[90m TS2740: [0mType '{}' is missing the following properties from type 'AxeConfigRule[]': length, pop, push, concat, and 29 more.

    [7m60[0m           rules: {},
    [7m  [0m [91m          ~~~~~[0m

  console.log
      • Use --help for command-specific guidance

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Check error logs for detailed error information

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Verify URL accessibility in a regular browser first

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Test with simpler pages to isolate issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • See also: a11yanalyze help api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Debug Failed Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Diagnose why a scan is failing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://problematic-site.com --debug --timeout 60000 --export-errors debug.log

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Enable debug mode with extended timeout and error logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help configuration, a11yanalyze help best-practices, a11yanalyze help api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    ✨ Best Practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Expert tips for effective accessibility testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Testing Strategy

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Develop an effective accessibility testing approach

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Start with key user journeys and critical pages

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Test both desktop and mobile viewports

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Include AAA guidelines for comprehensive coverage

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Regular testing throughout development, not just at the end

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Combine automated testing with manual accessibility review

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Performance Tips

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Optimize scanning for speed and efficiency

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Use appropriate concurrency levels (3-5 for most sites)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Respect server resources with reasonable delays

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Filter paths to focus on important content

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Use caching and incremental scanning for large sites

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

FAIL src/output/console-reporter.test.ts
  ● Test suite failed to run

    [96msrc/output/console-reporter.test.ts[0m:[93m559[0m:[93m21[0m - [91merror[0m[90m TS2339: [0mProperty 'logDebug' does not exist on type 'ConsoleReporter'.

    [7m559[0m       debugReporter.logDebug('Test debug message');
    [7m   [0m [91m                    ~~~~~~~~[0m

  console.log
    📍 CI/CD Integration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Integrate accessibility testing into your development workflow

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      GitHub Actions Example:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Example GitHub Actions workflow

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      name: Accessibility Test
      on: [push, pull_request]
      jobs:
        a11y-test:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v2
            - name: Test Accessibility
              run: |
                npx a11yanalyze scan ${{ env.SITE_URL }} \
                  --format json \
                  --output a11y-report.json \
                  --quiet

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Team Collaboration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Share accessibility testing across your team

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Create shared configuration files in your repository

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Document accessibility standards and expectations

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Set up automated reporting and notifications

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Train team members on interpreting results

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Integrate with existing bug tracking systems

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Comprehensive Site Audit:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Complete accessibility audit process

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze crawl https://example.com --depth 3 --include-aaa --format both --output full-audit.json --export-errors audit-errors.log

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Thorough site audit with comprehensive reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help configuration, a11yanalyze help crawling, a11yanalyze help reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    💡 Practical Examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Real-world usage examples and common scenarios. Includes e-commerce, mobile, government, and troubleshooting.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 E-commerce Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Test online shopping experiences for accessibility. Example: scan a product page or checkout flow.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Product Page Test:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test product page with desktop viewport and screenshots

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://shop.example.com/product/laptop-123 --viewport 1920x1080 --screenshot

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Checkout Flow Test:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Focus on critical checkout user journey

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://shop.example.com --include-paths /cart,/checkout --depth 2

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Content Management

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Test CMS-generated content for accessibility. Example: scan a blog or documentation site.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Blog Analysis:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Sample blog posts for content accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://blog.example.com --include-paths /posts --max-pages 20

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Documentation Site:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive documentation accessibility audit

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://docs.example.com --exclude-paths /api --depth 4

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Mobile-First Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Test responsive and mobile experiences. Example: scan with mobile viewport.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Mobile Viewport Test:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test mobile experience with strict accessibility standards

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --viewport 375x667 --profile strict

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Responsive Breakpoints:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test multiple responsive breakpoints

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      for size in "375x667" "768x1024" "1920x1080"; do
        a11yanalyze scan https://example.com --viewport $size --output "report-${size}.json"
      done

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Troubleshooting Example

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Diagnose and resolve scan issues. Example: scan with debug and extended timeout.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Debug Failed Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Enable debug mode with extended timeout and error logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://problematic-site.com --debug --timeout 60000 --export-errors debug.log

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Government Website Compliance:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Ensure government site meets accessibility standards

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze crawl https://gov.example.com --wcag-level AAA --profile strict --respect-robots --output compliance-report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive compliance testing with strict standards

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Educational Platform Testing:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Test learning management system accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze crawl https://lms.example.com --include-paths /courses,/assignments --exclude-paths /admin --max-pages 100

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Focus on student-facing content while excluding admin areas

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help scanning, a11yanalyze help crawling, a11yanalyze help best-practices, a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔌 Integration & API

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Integrate A11Y Analyze with other tools and workflows. Includes exit code, JSON, and environment variable documentation.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Exit Codes

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Understanding exit codes for automation. Use exit codes in CI/CD pipelines to fail builds on issues.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Exit code 0: Scan completed successfully, no critical issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Exit code 1: Scan completed but found accessibility issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Exit code 2: Scan failed due to configuration or technical errors

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Use exit codes in CI/CD pipelines to fail builds on issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • See also: a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 JSON Output Format

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Structure of JSON reports for programmatic use. See the README for a full schema.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Basic JSON Structure:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Simplified JSON report structure

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      {
        "summary": {
          "score": 85,
          "totalIssues": 12,
          "criticalIssues": 0
        },
        "issues": [
          {
            "id": "color-contrast",
            "wcagReference": "1.4.3",
            "severity": "serious",
            "description": "Text has insufficient color contrast"
          }
        ]
      }

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Environment Variables

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Complete list of supported environment variables. See the README for more.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Common Environment Variables:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Environment variables for deployment configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      # Core settings
      export A11Y_WCAG_LEVEL=AA
      export A11Y_TIMEOUT=30000
      export A11Y_OUTPUT_FORMAT=json
      
      # Browser settings
      export A11Y_HEADLESS=true
      export A11Y_VIEWPORT_WIDTH=1280
      export A11Y_VIEWPORT_HEIGHT=720
      
      # Crawling settings
      export A11Y_MAX_DEPTH=2
      export A11Y_MAX_PAGES=50
      export A11Y_CONCURRENCY=3

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Jenkins Pipeline Integration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Use in Jenkins CI/CD pipeline

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan $BUILD_URL --format json --output accessibility-report.json && archive accessibility-report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan build deployment and archive results as build artifact

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      API/JSON Output Example:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Use JSON output for integration with other tools

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://example.com --format json --output api-report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Generates a machine-readable JSON report for API consumption

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help configuration, a11yanalyze help reporting, a11yanalyze help best-practices, a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.error
    Help topic 'invalid-topic' not found

      15 | console.error = (...args: any[]) => {
      16 |   errorOutput.push(args.join(' '));
    > 17 |   originalError(...args);
         |   ^
      18 | };
      19 |
      20 | // Mock chalk for testing

      at console.Object.<anonymous>.console.error (src/cli/help-manager.test.ts:17:3)
      at Function.showHelp (src/cli/help-manager.ts:784:15)
      at Object.<anonymous> (src/cli/help-manager.test.ts:131:19)

  console.log
    
    📚 A11Y Analyze Help Topics

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Choose a topic to learn more:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      🚀 getting-started  Quick start guide and basic concepts

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔍 scanning         Single page accessibility scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🕷️ crawling         Site-wide accessibility analysis

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

FAIL src/output/issue-processor.test.ts
  ● Test suite failed to run

    [96msrc/output/issue-processor.test.ts[0m:[93m41[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'enhanced' is possibly 'undefined'.

    [7m41[0m       expect(enhanced.wcagCriterion).toBeDefined();
    [7m  [0m [91m             ~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m42[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'enhanced' is possibly 'undefined'.

    [7m42[0m       expect(enhanced.wcagCriterion?.number).toBe('1.1.1');
    [7m  [0m [91m             ~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m43[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'enhanced' is possibly 'undefined'.

    [7m43[0m       expect(enhanced.wcagCriterion?.title).toBe('Non-text Content');
    [7m  [0m [91m             ~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m44[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'enhanced' is possibly 'undefined'.

    [7m44[0m       expect(enhanced.priorityScore).toBeGreaterThan(0);
    [7m  [0m [91m             ~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m45[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'enhanced' is possibly 'undefined'.

    [7m45[0m       expect(enhanced.impactAssessment).toBeDefined();
    [7m  [0m [91m             ~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m46[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'enhanced' is possibly 'undefined'.

    [7m46[0m       expect(enhanced.complexity).toBeDefined();
    [7m  [0m [91m             ~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m58[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m58[0m       expect(enhancedIssues[0].id).toBe('high'); // Critical first
    [7m  [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m59[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m59[0m       expect(enhancedIssues[1].id).toBe('medium'); // Serious second
    [7m  [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m60[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m60[0m       expect(enhancedIssues[2].id).toBe('low'); // Minor last
    [7m  [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m71[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m71[0m       expect(enhancedIssues[0].wcagCriterion).toBeUndefined();
    [7m  [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m72[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m72[0m       expect(enhancedIssues[0].priorityScore).toBeGreaterThan(0);
    [7m  [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m86[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'enhanced' is possibly 'undefined'.

    [7m86[0m       expect(enhanced.contextualRemediation).toBeUndefined();
    [7m  [0m [91m             ~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m87[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'enhanced' is possibly 'undefined'.

    [7m87[0m       expect(enhanced.testingGuidance).toBeUndefined();
    [7m  [0m [91m             ~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m98[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m98[0m       expect(enhancedIssues[0].priorityScore).toBeGreaterThan(enhancedIssues[1].priorityScore!);
    [7m  [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m98[0m:[93m63[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m98[0m       expect(enhancedIssues[0].priorityScore).toBeGreaterThan(enhancedIssues[1].priorityScore!);
    [7m  [0m [91m                                                              ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m107[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m107[0m       expect(enhancedIssues[0].priorityScore).toBeGreaterThan(enhancedIssues[1].priorityScore!);
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m107[0m:[93m63[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m107[0m       expect(enhancedIssues[0].priorityScore).toBeGreaterThan(enhancedIssues[1].priorityScore!);
    [7m   [0m [91m                                                              ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m116[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m116[0m       expect(impactMode[0].priorityScore).not.toEqual(severityMode[0].priorityScore);
    [7m   [0m [91m             ~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m116[0m:[93m55[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m116[0m       expect(impactMode[0].priorityScore).not.toEqual(severityMode[0].priorityScore);
    [7m   [0m [91m                                                      ~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m129[0m:[93m27[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m129[0m       const remediation = enhancedIssues[0].contextualRemediation;
    [7m   [0m [91m                          ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m146[0m:[93m27[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m146[0m       const remediation = enhancedIssues[0].contextualRemediation;
    [7m   [0m [91m                          ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m162[0m:[93m27[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m162[0m       const remediation = enhancedIssues[0].contextualRemediation;
    [7m   [0m [91m                          ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m173[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m173[0m       expect(enhancedIssues[0].contextualRemediation?.urgency).toBe('immediate');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m174[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m174[0m       expect(enhancedIssues[1].contextualRemediation?.urgency).toBe('low');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m185[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m185[0m       expect(enhancedIssues[0].impactAssessment?.usersAffected).toBe(15); // Alt text impact
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m186[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m186[0m       expect(enhancedIssues[1].impactAssessment?.usersAffected).toBe(25); // Contrast impact
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m193[0m:[93m22[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m193[0m       const impact = enhancedIssues[0].impactAssessment;
    [7m   [0m [91m                     ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m205[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m205[0m       expect(enhancedIssues[0].impactAssessment?.complianceRisk).toBe('high');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m206[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m206[0m       expect(enhancedIssues[1].impactAssessment?.complianceRisk).toBe('low');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m213[0m:[93m30[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m213[0m       const businessImpact = enhancedIssues[0].impactAssessment?.businessImpact;
    [7m   [0m [91m                             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m227[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m227[0m       expect(enhancedIssues[0].complexity?.level).toBe('simple');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m228[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m228[0m       expect(enhancedIssues[1].complexity?.level).toBe('complex');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m238[0m:[93m26[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m238[0m       const complexity = enhancedIssues[0].complexity;
    [7m   [0m [91m                         ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m251[0m:[93m26[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m251[0m       const complexity = enhancedIssues[0].complexity;
    [7m   [0m [91m                         ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m260[0m:[93m26[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m260[0m       const complexity = enhancedIssues[0].complexity;
    [7m   [0m [91m                         ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m275[0m:[93m23[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m275[0m       const testing = enhancedIssues[0].testingGuidance;
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m289[0m:[93m26[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m289[0m       const quickTests = enhancedIssues[0].testingGuidance?.quickTests;
    [7m   [0m [91m                         ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m302[0m:[93m23[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m302[0m       const testing = enhancedIssues[0].testingGuidance;
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m334[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m334[0m       expect(enhancedIssues[0].category).toBe('forms');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m343[0m:[93m29[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m343[0m       const relatedIssues = enhancedIssues[0].relatedIssues;
    [7m   [0m [91m                            ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m417[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m417[0m       expect(enhancedIssues[0].title).toBe('Accessibility Issue'); // Default title
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m428[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m428[0m       expect(enhancedIssues[0].elements[0].html).toBeDefined();
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m428[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m428[0m       expect(enhancedIssues[0].elements[0].html).toBeDefined();
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m437[0m:[93m21[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m437[0m       const tools = enhancedIssues[0].contextualRemediation?.recommendedTools;
    [7m   [0m [91m                    ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m447[0m:[93m21[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m447[0m       const tools = enhancedIssues[0].contextualRemediation?.recommendedTools;
    [7m   [0m [91m                    ~~~~~~~~~~~~~~~~~[0m
    [96msrc/output/issue-processor.test.ts[0m:[93m456[0m:[93m21[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m456[0m       const tools = enhancedIssues[0].contextualRemediation?.recommendedTools;
    [7m   [0m [91m                    ~~~~~~~~~~~~~~~~~[0m

  console.log
      ⚙️ configuration    Configuration files and options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      📊 scoring          Understanding accessibility scores

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      📋 reporting        Reports and output formats

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔧 troubleshooting  Common issues and solutions

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      ✨ best-practices   Expert tips and recommendations

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      💡 examples         Real-world usage examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔌 api              Integration and automation

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    
    Usage:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help <topic>                 Show detailed help for a topic

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze scan --help                  Show scan command help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze crawl --help                 Show crawl command help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help getting-started         Learn the basics

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help examples                See practical examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help configuration           Configure the tool

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    📚 A11Y Analyze Help Topics

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Choose a topic to learn more:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      🚀 getting-started  Quick start guide and basic concepts

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔍 scanning         Single page accessibility scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🕷️ crawling         Site-wide accessibility analysis

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      ⚙️ configuration    Configuration files and options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      📊 scoring          Understanding accessibility scores

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      📋 reporting        Reports and output formats

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔧 troubleshooting  Common issues and solutions

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      ✨ best-practices   Expert tips and recommendations

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      💡 examples         Real-world usage examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔌 api              Integration and automation

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    
    Usage:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help <topic>                 Show detailed help for a topic

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze scan --help                  Show scan command help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze crawl --help                 Show crawl command help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help getting-started         Learn the basics

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help examples                See practical examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help configuration           Configure the tool

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    💡 Quick Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      • Get started: a11yanalyze help getting-started

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • See examples: a11yanalyze help examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Quick scan: a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Full help: a11yanalyze help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    💡 Quick Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      • Start with: a11yanalyze scan https://your-site.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Use --verbose for detailed progress information

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Save results: --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Test mobile: --viewport 375x667

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    💡 Quick Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      • Basic crawl: a11yanalyze crawl https://your-site.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Control depth: --depth 3 --max-pages 100

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Filter paths: --include-paths /products --exclude-paths /admin

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Be respectful: --delay 1000 --respect-robots

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    No tips available for this command.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Use: a11yanalyze tips (without arguments) for general tips

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔍 Search Results for "scanning"

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📖 scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: 🔍 Single Page Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Description: Comprehensive guide to scanning individual pages for accessibility issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Basic Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Basic Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Advanced Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Team Configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Error Logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 best-practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Performance Tips

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help best-practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    
    🔍 Search Results for "configuration"

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.info
    Discovering stories in Storybook at http://localhost:6006/index.json

      at StorybookBatchRunner.discoverStories (src/integrations/storybook-batch.ts:62:13)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📖 configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: ⚙️ Configuration Guide

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Configuration Sources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Configuration Files

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Configuration Files

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Generate Configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Generate Configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Team Configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.info
    Discovering stories in Storybook at http://localhost:6006/index.json

      at StorybookBatchRunner.discoverStories (src/integrations/storybook-batch.ts:62:13)

  console.log
    No help topics found for "nonexistentterm12345"

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Try: a11yanalyze help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔍 Search Results for "CRAWLING"

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📖 crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: 🕷️ Website Crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Basic Crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Basic Crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Performance Tuning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.warn
    Error finding Stories via index.json Error: index.json not found
        at Object.<anonymous> (/Users/phillipclark/projects/a11yanalyze/src/integrations/storybook-batch.test.ts:34:30)
        at Promise.then.completed (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:105:5)
        at _runTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:121:9)
        at run (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/runTest.js:444:34)
        at Object.worker (/Users/phillipclark/projects/a11yanalyze/node_modules/jest-runner/build/testWorker.js:106:12)

      79 |     } catch (e) {
      80 |       // Ignore and try stories.json fallback
    > 81 |       console.warn('Error finding Stories via index.json', e);
         |               ^
      82 |     }
      83 |     // Fallback to Storybook 6 stories.json
      84 |     try {

      at StorybookBatchRunner.discoverStories (src/integrations/storybook-batch.ts:81:15)
      at Object.<anonymous> (src/integrations/storybook-batch.test.ts:43:21)

  console.log
    
    🔍 Search Results for "example.com"

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📖 getting-started

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.info
    Discovering stories in Storybook at http://localhost:6006/index.json

      at StorybookBatchRunner.discoverStories (src/integrations/storybook-batch.ts:62:13)

  console.log
      • Example: First Scan

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

PASS src/integrations/storybook-batch.test.ts
  StorybookBatchRunner.discoverStories
    ✓ parses index.json (v7+) format (16 ms)
    ✓ parses stories.json (v6) format (4 ms)
    ✓ returns empty array if no stories found

  console.log
      • Example: E-commerce Quick Start

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.warn
    Invalid start URL: invalid-url

      628 |         }
      629 |       } catch (error) {
    > 630 |         console.warn(`Invalid start URL: ${url}`);
          |                 ^
      631 |       }
      632 |     }
      633 |

      at SiteCrawler.validateStartUrls (src/scanner/site-crawler.ts:630:17)
      at SiteCrawler.startCrawl (src/scanner/site-crawler.ts:67:32)
      at Object.<anonymous> (src/scanner/site-crawler.test.ts:151:32)

  console.log
      View: a11yanalyze help getting-started

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Example: E-commerce Site Scan

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Mobile Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Blog Analysis

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Government Compliance

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Example: CI/CD Integration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 best-practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Comprehensive Site Audit

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help best-practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Government Website Compliance

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Educational Platform Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Example: API/JSON Output Example

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    
    🔍 Single Page Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Comprehensive guide to scanning individual pages for accessibility issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Basic Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Essential options for page scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Standard Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      WCAG 2.2 AA compliance scan with default settings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Include AAA level guidelines for comprehensive testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --wcag-level AAA --include-aaa

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Output Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Control how results are displayed and saved

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Save JSON Report:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save detailed results to a JSON file

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Multiple Formats:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Show console output and save JSON report

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --format both --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Use --quiet for minimal output in CI/CD pipelines

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • JSON reports contain more detailed information than console output

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Screenshots can be captured with --screenshot flag

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Advanced Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Fine-tune scanning behavior for specific needs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Custom Viewport:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test with specific viewport size and extended timeout

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --viewport 1920x1080 --timeout 60000

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Strict Scoring:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Use strict scoring and only report serious+ issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --profile strict --min-severity serious

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      E-commerce Site Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan an e-commerce product page

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://shop.example.com/product/123 --include-aaa --screenshot

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive scan including AAA guidelines with screenshot capture

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Mobile Testing:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Test mobile responsiveness

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://example.com --viewport 375x667

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan with mobile viewport (iPhone SE dimensions)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help crawling, a11yanalyze help configuration, a11yanalyze help scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔧 Troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Solve common issues and get help when things go wrong. Includes timeout, error, and debug guidance.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Common Issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Solutions to frequently encountered problems. Includes timeout, error, and debug tips.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Timeout errors: Increase --timeout value for slow pages

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Network errors: Check internet connection and URL accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Permission errors: Ensure proper file write permissions for output

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Memory issues: Reduce --concurrency or --max-pages for large sites

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • For API and integration help, see: a11yanalyze help api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    ⚠️  Warnings:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Some sites block automated tools - check robots.txt

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • CAPTCHA or login requirements may prevent scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Heavy JavaScript sites may need longer timeouts

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • If you see ambiguous roles in screen reader simulation, review the Known Limitations section in the README.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Debugging Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Get more information when things go wrong. Use debug and verbose output, and export error logs.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Debug Mode:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Enable detailed debug logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --debug

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Verbose Output:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Verbose mode with error log export

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --verbose --export-errors debug.log

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Timeout Example:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Increase timeout for slow-loading sites

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://slow-site.com --timeout 120000

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Getting Help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    When you need additional support. See the README or use the API help topic.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Use --help for command-specific guidance

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Check error logs for detailed error information

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Verify URL accessibility in a regular browser first

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Test with simpler pages to isolate issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • See also: a11yanalyze help api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Debug Failed Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Diagnose why a scan is failing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

FAIL src/scanner/page-scanner.test.ts
  ● Test suite failed to run

    [96msrc/scanner/page-scanner.test.ts[0m:[93m721[0m:[93m9[0m - [91merror[0m[90m TS2353: [0mObject literal may only specify known properties, and 'status' does not exist in type 'PageLoadResult | Promise<PageLoadResult>'.

    [7m721[0m         status: 200,
    [7m   [0m [91m        ~~~~~~[0m
    [96msrc/scanner/page-scanner.test.ts[0m:[93m802[0m:[93m19[0m - [91merror[0m[90m TS2739: [0mType '{ html: string; target: string[]; }' is missing the following properties from type 'ViolationNode': any, all, none

    [7m802[0m           nodes: [{ html: '<img src="test.jpg">', target: ['img'] }],
    [7m   [0m [91m                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/scanner/page-scanner.test.ts[0m:[93m812[0m:[93m19[0m - [91merror[0m[90m TS2739: [0mType '{ html: string; target: string[]; }' is missing the following properties from type 'ViolationNode': any, all, none

    [7m812[0m           nodes: [{ html: '<div>Text</div>', target: ['div'] }],
    [7m   [0m [91m                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/scanner/page-scanner.test.ts[0m:[93m822[0m:[93m19[0m - [91merror[0m[90m TS2739: [0mType '{ html: string; target: string[]; }' is missing the following properties from type 'ViolationNode': any, all, none

    [7m822[0m           nodes: [{ html: '<button>Small</button>', target: ['button'] }],
    [7m   [0m [91m                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/scanner/page-scanner.test.ts[0m:[93m832[0m:[93m19[0m - [91merror[0m[90m TS2739: [0mType '{ html: string; target: string[]; }' is missing the following properties from type 'ViolationNode': any, all, none

    [7m832[0m           nodes: [{ html: '<div aria-label=""></div>', target: ['div'] }],
    [7m   [0m [91m                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/scanner/page-scanner.test.ts[0m:[93m859[0m:[93m19[0m - [91merror[0m[90m TS2739: [0mType '{ html: string; target: string[]; }' is missing the following properties from type 'ViolationNode': any, all, none

    [7m859[0m           nodes: [{ html: '<img>', target: ['img'] }],
    [7m   [0m [91m                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/scanner/page-scanner.test.ts[0m:[93m869[0m:[93m19[0m - [91merror[0m[90m TS2739: [0mType '{ html: string; target: string[]; }' is missing the following properties from type 'ViolationNode': any, all, none

    [7m869[0m           nodes: [{ html: '<button>Small</button>', target: ['button'] }],
    [7m   [0m [91m                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96msrc/scanner/page-scanner.test.ts[0m:[93m933[0m:[93m28[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ url: jest.Mock<any, any, any>; evaluate: jest.Mock<any, any, any>; waitForFunction: jest.Mock<any, any, any>; waitForLoadState: jest.Mock<any, any, any>; waitForTimeout: jest.Mock<...>; }' is not assignable to parameter of type 'Page | Promise<Page>'.
      Type '{ url: Mock<any, any, any>; evaluate: Mock<any, any, any>; waitForFunction: Mock<any, any, any>; waitForLoadState: Mock<any, any, any>; waitForTimeout: Mock<...>; }' is missing the following properties from type 'Page': evaluateHandle, addInitScript, $, $$, and 96 more.

    [7m933[0m         .mockResolvedValue({
    [7m   [0m [91m                           ~[0m
    [7m934[0m           url: jest.fn().mockReturnValue('https://example.com'),
    [7m   [0m [91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m...[0m 
    [7m948[0m           waitForTimeout: jest.fn().mockResolvedValue(undefined),
    [7m   [0m [91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m949[0m         });
    [7m   [0m [91m~~~~~~~~~[0m
    [96msrc/scanner/page-scanner.test.ts[0m:[93m954[0m:[93m9[0m - [91merror[0m[90m TS2353: [0mObject literal may only specify known properties, and 'status' does not exist in type 'PageLoadResult | Promise<PageLoadResult>'.

    [7m954[0m         status: 200,
    [7m   [0m [91m        ~~~~~~[0m

  console.log
      $ a11yanalyze scan https://problematic-site.com --debug --timeout 60000 --export-errors debug.log

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Enable debug mode with extended timeout and error logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help configuration, a11yanalyze help best-practices, a11yanalyze help api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔍 Single Page Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Comprehensive guide to scanning individual pages for accessibility issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Basic Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Essential options for page scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Standard Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      WCAG 2.2 AA compliance scan with default settings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Include AAA level guidelines for comprehensive testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --wcag-level AAA --include-aaa

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Output Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Control how results are displayed and saved

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Save JSON Report:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save detailed results to a JSON file

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Multiple Formats:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Show console output and save JSON report

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --format both --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Use --quiet for minimal output in CI/CD pipelines

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • JSON reports contain more detailed information than console output

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Screenshots can be captured with --screenshot flag

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Advanced Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Fine-tune scanning behavior for specific needs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Custom Viewport:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test with specific viewport size and extended timeout

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --viewport 1920x1080 --timeout 60000

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Strict Scoring:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Use strict scoring and only report serious+ issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --profile strict --min-severity serious

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      E-commerce Site Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan an e-commerce product page

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://shop.example.com/product/123 --include-aaa --screenshot

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive scan including AAA guidelines with screenshot capture

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Mobile Testing:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Test mobile responsiveness

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://example.com --viewport 375x667

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan with mobile viewport (iPhone SE dimensions)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help crawling, a11yanalyze help configuration, a11yanalyze help scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    💡 Practical Examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Real-world usage examples and common scenarios. Includes e-commerce, mobile, government, and troubleshooting.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 E-commerce Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Test online shopping experiences for accessibility. Example: scan a product page or checkout flow.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

PASS src/cli/help-manager.test.ts
  HelpManager
    Topic Help Display
      ✓ should display getting-started help (35 ms)
      ✓ should display scanning help (13 ms)
      ✓ should display crawling help (13 ms)
      ✓ should display configuration help (11 ms)
      ✓ should display scoring help (8 ms)
      ✓ should display reporting help (27 ms)
      ✓ should display troubleshooting help (14 ms)
      ✓ should display best-practices help (11 ms)
      ✓ should display examples help (10 ms)
      ✓ should display api help (10 ms)
      ✓ should handle invalid help topic gracefully (1 ms)
    Topic Menu Display
      ✓ should display help topic menu (4 ms)
      ✓ should show usage examples in topic menu (5 ms)
    Quick Tips
      ✓ should show general tips by default (2 ms)
      ✓ should show scan-specific tips (1 ms)
      ✓ should show crawl-specific tips (1 ms)
      ✓ should handle unknown command gracefully (1 ms)
    Help Search
      ✓ should search help content for keywords (4 ms)
      ✓ should find multiple matching topics (2 ms)
      ✓ should handle no search results
      ✓ should search case-insensitively (2 ms)
      ✓ should search in examples and descriptions (7 ms)
    Configuration Template Generation
      ✓ should generate JSON configuration template (1 ms)
      ✓ should generate JavaScript configuration template
      ✓ should include schema in JSON template
      ✓ should include helpful comments in JS template
    Help Content Structure
      ✓ should include code blocks in help topics (9 ms)
      ✓ should include tips and warnings (10 ms)
      ✓ should include see-also references (9 ms)
      ✓ should include practical examples (10 ms)
      ✓ should format different code languages differently (8 ms)
    Interactive Features
      ✓ should handle process stdout columns for formatting (4 ms)
      ✓ should handle missing process stdout columns (5 ms)
    Error Handling
      ✓ should handle malformed help content gracefully (11 ms)
      ✓ should handle empty search queries (22 ms)
      ✓ should handle special characters in search (1 ms)
    Content Quality
      ✓ should provide comprehensive getting-started content (8 ms)
      ✓ should provide practical examples (9 ms)
      ✓ should provide troubleshooting guidance (8 ms)
      ✓ should include comprehensive API documentation (7 ms)
    Cross-References
      ✓ should reference related topics appropriately (8 ms)
      ✓ should maintain consistency across topics (24 ms)

  console.log
      Product Page Test:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test product page with desktop viewport and screenshots

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://shop.example.com/product/laptop-123 --viewport 1920x1080 --screenshot

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Checkout Flow Test:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Focus on critical checkout user journey

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://shop.example.com --include-paths /cart,/checkout --depth 2

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Content Management

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Test CMS-generated content for accessibility. Example: scan a blog or documentation site.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Blog Analysis:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Sample blog posts for content accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://blog.example.com --include-paths /posts --max-pages 20

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Documentation Site:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive documentation accessibility audit

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://docs.example.com --exclude-paths /api --depth 4

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Mobile-First Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Test responsive and mobile experiences. Example: scan with mobile viewport.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Mobile Viewport Test:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test mobile experience with strict accessibility standards

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --viewport 375x667 --profile strict

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Responsive Breakpoints:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test multiple responsive breakpoints

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      for size in "375x667" "768x1024" "1920x1080"; do
        a11yanalyze scan https://example.com --viewport $size --output "report-${size}.json"
      done

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Troubleshooting Example

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Diagnose and resolve scan issues. Example: scan with debug and extended timeout.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Debug Failed Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Enable debug mode with extended timeout and error logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://problematic-site.com --debug --timeout 60000 --export-errors debug.log

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Government Website Compliance:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Ensure government site meets accessibility standards

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze crawl https://gov.example.com --wcag-level AAA --profile strict --respect-robots --output compliance-report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive compliance testing with strict standards

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Educational Platform Testing:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Test learning management system accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze crawl https://lms.example.com --include-paths /courses,/assignments --exclude-paths /admin --max-pages 100

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Focus on student-facing content while excluding admin areas

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help scanning, a11yanalyze help crawling, a11yanalyze help best-practices, a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    ⚙️ Configuration Guide

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Complete guide to configuring A11Y Analyze for your needs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Configuration Sources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Multiple ways to configure the tool, in priority order

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      CLI Arguments (Highest Priority):

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Command-line arguments override all other settings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --wcag-level AAA --timeout 45000

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Environment Variables:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Environment variables for deployment configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      export A11Y_WCAG_LEVEL=AAA
      export A11Y_TIMEOUT=45000
      a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Configuration File:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save as .a11yanalyzerc.json for project configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      {
        "scanning": {
          "wcagLevel": "AAA",
          "timeout": 45000
        },
        "output": {
          "format": "json",
          "verbose": true
        }
      }

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Configuration Files

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Different configuration file formats and locations

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      JSON Configuration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      JSON format configuration file

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      # Create configuration file
      echo '{"scanning": {"wcagLevel": "AAA"}}' > .a11yanalyzerc.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      JavaScript Configuration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save as .a11yanalyzerc.js or a11yanalyze.config.js

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      module.exports = {
        scanning: {
          wcagLevel: "AAA",
          includeAAA: true
        },
        browser: {
          viewport: { width: 1920, height: 1080 }
        }
      };

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Package.json Integration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Add configuration to existing package.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      {
        "name": "my-project",
        "a11yanalyze": {
          "scanning": {
            "wcagLevel": "AAA"
          }
        }
      }

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Generate Configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Create sample configuration files

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Generate Sample Config:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Generate a sample configuration file (future feature)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze config --generate --format json > .a11yanalyzerc.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Team Configuration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Set up consistent configuration for a development team

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ echo '{"scanning": {"wcagLevel": "AA", "includeAAA": true}, "scoring": {"profile": "balanced"}}' > .a11yanalyzerc.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Create team configuration with AA compliance plus AAA warnings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help getting-started, a11yanalyze help best-practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    📚 A11Y Analyze Help Topics

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Choose a topic to learn more:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      🚀 getting-started  Quick start guide and basic concepts

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔍 scanning         Single page accessibility scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🕷️ crawling         Site-wide accessibility analysis

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      ⚙️ configuration    Configuration files and options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      📊 scoring          Understanding accessibility scores

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      📋 reporting        Reports and output formats

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔧 troubleshooting  Common issues and solutions

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      ✨ best-practices   Expert tips and recommendations

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      💡 examples         Real-world usage examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔌 api              Integration and automation

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    
    Usage:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help <topic>                 Show detailed help for a topic

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze scan --help                  Show scan command help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze crawl --help                 Show crawl command help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help getting-started         Learn the basics

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help examples                See practical examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help configuration           Configure the tool

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    📚 A11Y Analyze Help Topics

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Choose a topic to learn more:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      🚀 getting-started  Quick start guide and basic concepts

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔍 scanning         Single page accessibility scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🕷️ crawling         Site-wide accessibility analysis

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      ⚙️ configuration    Configuration files and options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      📊 scoring          Understanding accessibility scores

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      📋 reporting        Reports and output formats

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔧 troubleshooting  Common issues and solutions

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      ✨ best-practices   Expert tips and recommendations

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      💡 examples         Real-world usage examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      🔌 api              Integration and automation

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    
    Usage:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help <topic>                 Show detailed help for a topic

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze scan --help                  Show scan command help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze crawl --help                 Show crawl command help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help getting-started         Learn the basics

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help examples                See practical examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help configuration           Configure the tool

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🚀 Getting Started with A11Y Analyze

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Learn the basics of accessibility testing with our comprehensive tool. This quick start guide will help you run your first scan and interpret results.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Quick Start

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Get up and running with accessibility testing in minutes. Run a basic scan, review the output, and explore further options.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Basic Page Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Scan a single page with default settings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Verbose Output:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Get detailed progress information

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --verbose

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Quick Start Example:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Scan an e-commerce site and output both console and JSON reports

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://ecommerce.example.com --format both

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Start with a single page scan to understand the tool

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Use --verbose to see detailed progress information

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Check the exit code: 0 = success, 1 = issues found

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • See practical examples: a11yanalyze help examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • For troubleshooting, see: a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Understanding Results

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Learn how to interpret accessibility scan results. The tool provides a score, issue breakdown, and remediation tips.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Issues are categorized by WCAG level (A, AA, AAA)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Severity levels: critical, serious, moderate, minor, warning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Scores range from 0-100, with 80+ considered good

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Each issue includes remediation guidance and help URLs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • See also: a11yanalyze help reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      First Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Perform your first accessibility scan

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://example.com --format both

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scans a page and shows results both in console and JSON format

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Expected: Console output with score and JSON report

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      E-commerce Quick Start:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan an e-commerce product page for accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://shop.example.com/product/123 --include-aaa --screenshot

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive scan including AAA guidelines with screenshot capture

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Expected: Accessibility issues, warnings, and screenshot saved

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help scanning, a11yanalyze help configuration, a11yanalyze help examples, a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔍 Search Results for ""

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📖 getting-started

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: 🚀 Getting Started with A11Y Analyze

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Description: Learn the basics of accessibility testing with our comprehensive tool. This quick start guide will help you run your first scan and interpret results.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Quick Start

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Quick Start

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Understanding Results

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Understanding Results

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: First Scan

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: E-commerce Quick Start

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help getting-started

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: 🔍 Single Page Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Description: Comprehensive guide to scanning individual pages for accessibility issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Basic Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Basic Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Output Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Output Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Advanced Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Advanced Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: E-commerce Site Scan

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Mobile Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: 🕷️ Website Crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Description: Comprehensive site-wide accessibility analysis

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Basic Crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Basic Crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Crawl Control

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Crawl Control

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Performance Tuning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Performance Tuning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Corporate Website Audit

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Blog Analysis

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: ⚙️ Configuration Guide

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Description: Complete guide to configuring A11Y Analyze for your needs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Configuration Sources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Configuration Sources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Configuration Files

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Configuration Files

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Generate Configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Generate Configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Team Configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: 📊 Scoring System

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Description: Understanding and customizing accessibility scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Scoring Profiles

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Scoring Profiles

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Score Interpretation

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Score Interpretation

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Customizing Scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Customizing Scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Government Compliance

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: 📋 Reports and Output

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Description: Generate and customize accessibility reports

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Output Formats

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Output Formats

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Report Contents

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Report Contents

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Error Logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Error Logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: CI/CD Integration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: 🔧 Troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Description: Solve common issues and get help when things go wrong. Includes timeout, error, and debug guidance.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Common Issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Common Issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Debugging Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Debugging Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Getting Help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Getting Help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Debug Failed Scan

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 best-practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: ✨ Best Practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Description: Expert tips for effective accessibility testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Testing Strategy

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Testing Strategy

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Performance Tips

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Performance Tips

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: CI/CD Integration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: CI/CD Integration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Team Collaboration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Team Collaboration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Comprehensive Site Audit

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help best-practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: 💡 Practical Examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Description: Real-world usage examples and common scenarios. Includes e-commerce, mobile, government, and troubleshooting.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: E-commerce Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: E-commerce Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Content Management

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Content Management

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Mobile-First Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Mobile-First Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Troubleshooting Example

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Troubleshooting Example

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Government Website Compliance

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Educational Platform Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📖 api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Title: 🔌 Integration & API

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Description: Integrate A11Y Analyze with other tools and workflows. Includes exit code, JSON, and environment variable documentation.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Exit Codes

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Exit Codes

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: JSON Output Format

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: JSON Output Format

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Section: Environment Variables

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Content: Environment Variables

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: Jenkins Pipeline Integration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Example: API/JSON Output Example

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      View: a11yanalyze help api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    No help topics found for "test@#$%"

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Try: a11yanalyze help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🚀 Getting Started with A11Y Analyze

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Learn the basics of accessibility testing with our comprehensive tool. This quick start guide will help you run your first scan and interpret results.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Quick Start

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Get up and running with accessibility testing in minutes. Run a basic scan, review the output, and explore further options.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Basic Page Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Scan a single page with default settings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Verbose Output:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Get detailed progress information

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --verbose

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Quick Start Example:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Scan an e-commerce site and output both console and JSON reports

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://ecommerce.example.com --format both

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Start with a single page scan to understand the tool

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Use --verbose to see detailed progress information

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Check the exit code: 0 = success, 1 = issues found

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • See practical examples: a11yanalyze help examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • For troubleshooting, see: a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Understanding Results

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Learn how to interpret accessibility scan results. The tool provides a score, issue breakdown, and remediation tips.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Issues are categorized by WCAG level (A, AA, AAA)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Severity levels: critical, serious, moderate, minor, warning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Scores range from 0-100, with 80+ considered good

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Each issue includes remediation guidance and help URLs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • See also: a11yanalyze help reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      First Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Perform your first accessibility scan

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://example.com --format both

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scans a page and shows results both in console and JSON format

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Expected: Console output with score and JSON report

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      E-commerce Quick Start:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan an e-commerce product page for accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://shop.example.com/product/123 --include-aaa --screenshot

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive scan including AAA guidelines with screenshot capture

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Expected: Accessibility issues, warnings, and screenshot saved

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help scanning, a11yanalyze help configuration, a11yanalyze help examples, a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    💡 Practical Examples

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Real-world usage examples and common scenarios. Includes e-commerce, mobile, government, and troubleshooting.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 E-commerce Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Test online shopping experiences for accessibility. Example: scan a product page or checkout flow.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Product Page Test:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test product page with desktop viewport and screenshots

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://shop.example.com/product/laptop-123 --viewport 1920x1080 --screenshot

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Checkout Flow Test:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Focus on critical checkout user journey

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://shop.example.com --include-paths /cart,/checkout --depth 2

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Content Management

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Test CMS-generated content for accessibility. Example: scan a blog or documentation site.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Blog Analysis:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Sample blog posts for content accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://blog.example.com --include-paths /posts --max-pages 20

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Documentation Site:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive documentation accessibility audit

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://docs.example.com --exclude-paths /api --depth 4

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Mobile-First Testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Test responsive and mobile experiences. Example: scan with mobile viewport.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Mobile Viewport Test:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test mobile experience with strict accessibility standards

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --viewport 375x667 --profile strict

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Responsive Breakpoints:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test multiple responsive breakpoints

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      for size in "375x667" "768x1024" "1920x1080"; do
        a11yanalyze scan https://example.com --viewport $size --output "report-${size}.json"
      done

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Troubleshooting Example

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Diagnose and resolve scan issues. Example: scan with debug and extended timeout.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Debug Failed Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Enable debug mode with extended timeout and error logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://problematic-site.com --debug --timeout 60000 --export-errors debug.log

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Government Website Compliance:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Ensure government site meets accessibility standards

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze crawl https://gov.example.com --wcag-level AAA --profile strict --respect-robots --output compliance-report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive compliance testing with strict standards

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Educational Platform Testing:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Test learning management system accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze crawl https://lms.example.com --include-paths /courses,/assignments --exclude-paths /admin --max-pages 100

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Focus on student-facing content while excluding admin areas

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help scanning, a11yanalyze help crawling, a11yanalyze help best-practices, a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔧 Troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Solve common issues and get help when things go wrong. Includes timeout, error, and debug guidance.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Common Issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Solutions to frequently encountered problems. Includes timeout, error, and debug tips.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Timeout errors: Increase --timeout value for slow pages

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Network errors: Check internet connection and URL accessibility

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Permission errors: Ensure proper file write permissions for output

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Memory issues: Reduce --concurrency or --max-pages for large sites

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • For API and integration help, see: a11yanalyze help api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    ⚠️  Warnings:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Some sites block automated tools - check robots.txt

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • CAPTCHA or login requirements may prevent scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Heavy JavaScript sites may need longer timeouts

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • If you see ambiguous roles in screen reader simulation, review the Known Limitations section in the README.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Debugging Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Get more information when things go wrong. Use debug and verbose output, and export error logs.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Debug Mode:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Enable detailed debug logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --debug

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Verbose Output:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Verbose mode with error log export

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --verbose --export-errors debug.log

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Timeout Example:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Increase timeout for slow-loading sites

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://slow-site.com --timeout 120000

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Getting Help

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    When you need additional support. See the README or use the API help topic.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Use --help for command-specific guidance

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Check error logs for detailed error information

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Verify URL accessibility in a regular browser first

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Test with simpler pages to isolate issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • See also: a11yanalyze help api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Debug Failed Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Diagnose why a scan is failing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://problematic-site.com --debug --timeout 60000 --export-errors debug.log

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Enable debug mode with extended timeout and error logging

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help configuration, a11yanalyze help best-practices, a11yanalyze help api

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔌 Integration & API

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Integrate A11Y Analyze with other tools and workflows. Includes exit code, JSON, and environment variable documentation.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Exit Codes

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Understanding exit codes for automation. Use exit codes in CI/CD pipelines to fail builds on issues.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Exit code 0: Scan completed successfully, no critical issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Exit code 1: Scan completed but found accessibility issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Exit code 2: Scan failed due to configuration or technical errors

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Use exit codes in CI/CD pipelines to fail builds on issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • See also: a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 JSON Output Format

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Structure of JSON reports for programmatic use. See the README for a full schema.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Basic JSON Structure:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Simplified JSON report structure

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      {
        "summary": {
          "score": 85,
          "totalIssues": 12,
          "criticalIssues": 0
        },
        "issues": [
          {
            "id": "color-contrast",
            "wcagReference": "1.4.3",
            "severity": "serious",
            "description": "Text has insufficient color contrast"
          }
        ]
      }

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Environment Variables

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Complete list of supported environment variables. See the README for more.

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Common Environment Variables:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Environment variables for deployment configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      # Core settings
      export A11Y_WCAG_LEVEL=AA
      export A11Y_TIMEOUT=30000
      export A11Y_OUTPUT_FORMAT=json
      
      # Browser settings
      export A11Y_HEADLESS=true
      export A11Y_VIEWPORT_WIDTH=1280
      export A11Y_VIEWPORT_HEIGHT=720
      
      # Crawling settings
      export A11Y_MAX_DEPTH=2
      export A11Y_MAX_PAGES=50
      export A11Y_CONCURRENCY=3

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      Jenkins Pipeline Integration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Use in Jenkins CI/CD pipeline

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan $BUILD_URL --format json --output accessibility-report.json && archive accessibility-report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan build deployment and archive results as build artifact

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      API/JSON Output Example:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Use JSON output for integration with other tools

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://example.com --format json --output api-report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Generates a machine-readable JSON report for API consumption

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help configuration, a11yanalyze help reporting, a11yanalyze help best-practices, a11yanalyze help troubleshooting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔍 Single Page Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    Comprehensive guide to scanning individual pages for accessibility issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    📍 Basic Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Essential options for page scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Standard Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      WCAG 2.2 AA compliance scan with default settings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Include AAA level guidelines for comprehensive testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --wcag-level AAA --include-aaa

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Output Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Control how results are displayed and saved

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Save JSON Report:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save detailed results to a JSON file

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Multiple Formats:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Show console output and save JSON report

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --format both --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      • Use --quiet for minimal output in CI/CD pipelines

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • JSON reports contain more detailed information than console output

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Screenshots can be captured with --screenshot flag

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Advanced Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Fine-tune scanning behavior for specific needs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Custom Viewport:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test with specific viewport size and extended timeout

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --viewport 1920x1080 --timeout 60000

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Strict Scoring:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Use strict scoring and only report serious+ issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --profile strict --min-severity serious

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      E-commerce Site Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan an e-commerce product page

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://shop.example.com/product/123 --include-aaa --screenshot

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive scan including AAA guidelines with screenshot capture

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Mobile Testing:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Test mobile responsiveness

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://example.com --viewport 375x667

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Scan with mobile viewport (iPhone SE dimensions)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
      a11yanalyze help crawling, a11yanalyze help configuration, a11yanalyze help scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)

  console.log
    
    🔍 Single Page Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Comprehensive guide to scanning individual pages for accessibility issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Basic Scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    Essential options for page scanning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Standard Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      WCAG 2.2 AA compliance scan with default settings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Include AAA level guidelines for comprehensive testing

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --wcag-level AAA --include-aaa

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Output Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    Control how results are displayed and saved

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save JSON Report:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save detailed results to a JSON file

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Multiple Formats:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Show console output and save JSON report

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --format both --output report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Use --quiet for minimal output in CI/CD pipelines

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • JSON reports contain more detailed information than console output

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Screenshots can be captured with --screenshot flag

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Advanced Options

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    Fine-tune scanning behavior for specific needs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Custom Viewport:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test with specific viewport size and extended timeout

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --viewport 1920x1080 --timeout 60000

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Strict Scoring:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Use strict scoring and only report serious+ issues

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --profile strict --min-severity serious

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      E-commerce Site Scan:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Scan an e-commerce product page

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://shop.example.com/product/123 --include-aaa --screenshot

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive scan including AAA guidelines with screenshot capture

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Mobile Testing:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Test mobile responsiveness

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze scan https://example.com --viewport 375x667

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Scan with mobile viewport (iPhone SE dimensions)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze help crawling, a11yanalyze help configuration, a11yanalyze help scoring

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    
    🕷️ Website Crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Comprehensive site-wide accessibility analysis

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Basic Crawling

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    Start crawling websites for comprehensive accessibility analysis

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Simple Site Crawl:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Crawl up to 2 levels deep, maximum 50 pages

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Deep Crawl:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Deeper crawl with higher page limit

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com --depth 4 --max-pages 200

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Crawl Control

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    Control which pages are crawled and how

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Domain Restrictions:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Only crawl specific domains

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com --allowed-domains example.com,blog.example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Path Filtering:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Exclude admin/API paths, focus on product pages

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com --exclude-paths /admin,/api --include-paths /products

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    💡 Tips:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Use --respect-robots to honor robots.txt directives

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Adjust --concurrency based on server capacity

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      • Use --delay to be respectful of server resources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Performance Tuning

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    Optimize crawling performance and resource usage

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      High Performance:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Faster crawling with higher concurrency

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com --concurrency 5 --delay 500

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Conservative Crawling:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Gentle crawling that respects server resources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze crawl https://example.com --concurrency 1 --delay 2000 --respect-robots

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Corporate Website Audit:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Comprehensive audit of a corporate website

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze crawl https://company.com --depth 3 --max-pages 100 --output audit-report.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Deep crawl for comprehensive accessibility audit with detailed reporting

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Blog Analysis:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Analyze a blog while respecting resources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      $ a11yanalyze crawl https://blog.example.com --include-paths /posts --delay 1000 --respect-robots

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Focus on blog posts with respectful crawling behavior

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze help scanning, a11yanalyze help configuration, a11yanalyze help best-practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    
    ⚙️ Configuration Guide

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    ────────────────────────────────────────────────────────────────────────────────

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    Complete guide to configuring A11Y Analyze for your needs

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
    📍 Configuration Sources

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    Multiple ways to configure the tool, in priority order

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      CLI Arguments (Highest Priority):

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Command-line arguments override all other settings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze scan https://example.com --wcag-level AAA --timeout 45000

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Environment Variables:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Environment variables for deployment configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      export A11Y_WCAG_LEVEL=AAA
      export A11Y_TIMEOUT=45000
      a11yanalyze scan https://example.com

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Configuration File:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save as .a11yanalyzerc.json for project configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      {
        "scanning": {
          "wcagLevel": "AAA",
          "timeout": 45000
        },
        "output": {
          "format": "json",
          "verbose": true
        }
      }

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Configuration Files

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    Different configuration file formats and locations

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      JSON Configuration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      JSON format configuration file

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      # Create configuration file
      echo '{"scanning": {"wcagLevel": "AAA"}}' > .a11yanalyzerc.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      JavaScript Configuration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Save as .a11yanalyzerc.js or a11yanalyze.config.js

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      module.exports = {
        scanning: {
          wcagLevel: "AAA",
          includeAAA: true
        },
        browser: {
          viewport: { width: 1920, height: 1080 }
        }
      };

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Package.json Integration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Add configuration to existing package.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      {
        "name": "my-project",
        "a11yanalyze": {
          "scanning": {
            "wcagLevel": "AAA"
          }
        }
      }

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📍 Generate Configuration

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    Create sample configuration files

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Generate Sample Config:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Generate a sample configuration file (future feature)

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze config --generate --format json > .a11yanalyzerc.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    📚 Examples:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      Team Configuration:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Set up consistent configuration for a development team

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      $ echo '{"scanning": {"wcagLevel": "AA", "includeAAA": true}, "scoring": {"profile": "balanced"}}' > .a11yanalyzerc.json

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
      Create team configuration with AA compliance plus AAA warnings

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log


      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)
          at Array.forEach (<anonymous>)

  console.log
    🔗 See Also:

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

  console.log
      a11yanalyze help getting-started, a11yanalyze help best-practices

      at console.Object.<anonymous>.console.log (src/cli/help-manager.test.ts:13:3)
          at Array.forEach (<anonymous>)

PASS src/scanner/error-resilience.test.ts
  CircuitBreaker
    Circuit States
      ✓ should start in CLOSED state (2 ms)
      ✓ should transition to OPEN after threshold failures (2 ms)
      ✓ should reject operations when OPEN (11 ms)
      ✓ should transition to HALF_OPEN after timeout (1 ms)
      ✓ should reset failure count on successful operation (1 ms)
      ✓ should allow manual reset
  TimeoutManager
    Basic Timeout Handling
      ✓ should return base timeout when adaptive timeouts disabled
      ✓ should return base timeout when no metrics available
    Metrics Recording
      ✓ should record successful execution metrics (1 ms)
      ✓ should record failed execution metrics
      ✓ should calculate average execution time correctly
    Adaptive Timeout Calculation
      ✓ should increase timeout for high failure rate
      ✓ should decrease timeout for consistently fast operations
      ✓ should not adapt with insufficient data
      ✓ should respect minimum and maximum timeout bounds
    Reset Functionality
      ✓ should clear all metrics on reset
  RetryManager
    Successful Retry Logic
      ✓ should succeed on first attempt (1 ms)
      ✓ should retry and eventually succeed (179 ms)
      ✓ should not retry non-retryable errors (1 ms)
      ✓ should fail after max attempts (57 ms)
    Backoff Strategies
      ✓ should use linear backoff (303 ms)
      ✓ should use exponential backoff (302 ms)
      ✓ should use fixed delay (203 ms)
      ✓ should respect maximum retry delay (1001 ms)
  ErrorResilienceManager
    Resilient Execution
      ✓ should execute operation successfully (1 ms)
      ✓ should apply all resilience features (42 ms)
      ✓ should enforce concurrent operation limits (102 ms)
      ✓ should handle timeout correctly (52 ms)
      ✓ should work without optional features
    Error Categorization
      ✓ should categorize timeout errors (1 ms)
      ✓ should categorize network errors
      ✓ should categorize parsing errors
      ✓ should default to runtime for unknown errors (1 ms)
      ✓ should include context details
    Status and Metrics
      ✓ should provide comprehensive status (1 ms)
      ✓ should track active operations (52 ms)
      ✓ should allow configuration updates (1 ms)
      ✓ should allow reset of all metrics (1 ms)
    Error Creation Utilities
      ✓ should create retryable error with attempt information (1 ms)

PASS src/scanner/site-crawler.test.ts (6.42 s)
  SiteCrawler
    Constructor and Initialization
      ✓ should create SiteCrawler instance (2 ms)
      ✓ should initialize with custom configurations
    Session Management
      ✓ should start a new crawl session (2 ms)
      ✓ should reject starting crawl when already running (8 ms)
      ✓ should validate start URLs (18 ms)
      ✓ should pause and resume crawl session (101 ms)
      ✓ should stop crawl session (1 ms)
      ✓ should stop crawl session in-progress and set status to cancelled (301 ms)
    URL Processing
      ✓ should process start URLs (1009 ms)
      ✓ should respect depth limits (102 ms)
      ✓ should respect page limits (201 ms)
      ✓ should handle scan failures gracefully (103 ms)
    Domain and Path Filtering
      ✓ should filter URLs by allowed domains (103 ms)
      ✓ should exclude domains from crawling (102 ms)
      ✓ should filter URLs by path patterns (102 ms)
    Rate Limiting and Concurrency
      ✓ should apply rate limiting between requests (303 ms)
      ✓ should respect concurrency limits (201 ms)
    Progress Tracking
      ✓ should track crawl progress (52 ms)
      ✓ should calculate scan rate (103 ms)
      ✓ should emit crawl events (101 ms)
    Statistics and Results
      ✓ should collect crawl statistics (103 ms)
      ✓ should track WCAG compliance statistics (101 ms)
      ✓ should store scan results (103 ms)
    Error Handling
      ✓ should handle scanner initialization failure (1 ms)
      ✓ should track recent errors (1012 ms)
      ✓ should handle session cleanup on errors (102 ms)
    Configuration
      ✓ should use default configuration values
      ✓ should merge custom configuration with defaults (1 ms)
    Session State
      ✓ should return null session when not running
      ✓ should return null progress when not running
      ✓ should handle multiple sessions sequentially (202 ms)

A worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks. Active timers can also cause this, ensure that .unref() was called on them.
Test Suites: 10 failed, 7 passed, 17 total
Tests:       43 failed, 291 passed, 334 total
Snapshots:   0 total
Time:        7.26 s
Ran all test suites.
